/*
 * MethodFrame.java
 *
 * Created on 22. maaliskuuta 2008, 23:33
 */
package org.quickclient.gui;

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.IOException;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.ExJTextArea;
import org.quickclient.classes.QListItem;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.DfList;
import com.documentum.fc.common.IDfId;
import com.documentum.fc.common.IDfList;
import com.documentum.fc.methodserver.IDfMethod;


/**
 * 
 * @author Administrator
 */
public class MethodFrame extends javax.swing.JFrame {

	DocuSessionManager smanager = DocuSessionManager.getInstance();
	IDfSysObject currentObj;
	Logger log = Logger.getLogger(MethodFrame.class);
	private String  insertedId = null;

	/** Creates new form MethodFrame */
	public MethodFrame() {
		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		txtFilter = TextFieldFactory.createJTextField();
		cmdQuery = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		lstMethods = new javax.swing.JList();
		cmdEdit = new javax.swing.JButton();
		cmdNew = new javax.swing.JButton();
		cmdDelete = new javax.swing.JButton();
		cmdViewContent = new javax.swing.JButton();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel1.setBounds(40, 30, 80, 14);
		jLabel2 = new javax.swing.JLabel();
		jLabel2.setBounds(40, 60, 80, 14);
		jLabel3 = new javax.swing.JLabel();
		jLabel3.setBounds(40, 90, 80, 14);
		jLabel4 = new javax.swing.JLabel();
		jLabel4.setBounds(40, 180, 80, 14);
		cmbMethodType = new javax.swing.JComboBox();
		cmbMethodType.setBounds(130, 180, 250, 22);
		jLabel5 = new javax.swing.JLabel();
		jLabel5.setBounds(40, 210, 80, 14);
		txtFilePath = TextFieldFactory.createJTextField();
		txtFilePath.setBounds(130, 210, 180, 20);
		txtMethodName = TextFieldFactory.createJTextField();
		txtMethodName.setBounds(130, 30, 250, 20);
		txtMethodVerb = TextFieldFactory.createJTextField();
		txtMethodVerb.setBounds(130, 60, 250, 20);
		jLabel6 = new javax.swing.JLabel();
		jLabel6.setBounds(40, 240, 80, 14);
		txtTimeoutMin = TextFieldFactory.createJTextField();
		txtTimeoutMin.setBounds(130, 240, 70, 20);
		jLabel7 = new javax.swing.JLabel();
		jLabel7.setBounds(40, 270, 80, 14);
		txtTimeoutDefault = TextFieldFactory.createJTextField();
		txtTimeoutDefault.setBounds(130, 270, 70, 20);
		jLabel8 = new javax.swing.JLabel();
		jLabel8.setBounds(40, 300, 80, 14);
		txtTimeoutMax = TextFieldFactory.createJTextField();
		txtTimeoutMax.setBounds(130, 300, 70, 20);
		cmdBrowse = new javax.swing.JButton();
		cmdBrowse.setBounds(320, 210, 57, 23);
		chkLaunchdirect1 = new javax.swing.JCheckBox();
		chkLaunchdirect1.setBounds(130, 340, 91, 20);
		chklaunchasync1 = new javax.swing.JCheckBox();
		chklaunchasync1.setBounds(130, 360, 91, 20);
		chkRunAsServer1 = new javax.swing.JCheckBox();
		chkRunAsServer1.setBounds(130, 380, 93, 23);
		chkTracelaunch1 = new javax.swing.JCheckBox();
		chkTracelaunch1.setBounds(130, 400, 89, 23);
		chkUseMethodContent = new javax.swing.JCheckBox();
		chkUseMethodContent.setBounds(130, 440, 125, 23);
		chkUseMethodServer = new javax.swing.JCheckBox();
		chkUseMethodServer.setBounds(130, 420, 117, 23);
		jLabel9 = new javax.swing.JLabel();
		jLabel9.setBounds(40, 470, 80, 14);
		jTextField8 = TextFieldFactory.createJTextField();
		jTextField8.setBounds(130, 470, 240, 20);
		jScrollPane3 = new javax.swing.JScrollPane();
		jScrollPane3.setBounds(130, 90, 250, 80);
		lstArgs1 = new javax.swing.JList();
		jPanel3 = new javax.swing.JPanel();
		lblResultText = new javax.swing.JLabel();
		lblProcessId = new javax.swing.JLabel();
		txtTimeout = TextFieldFactory.createJTextField();
		chkSaveResults = new javax.swing.JCheckBox();
		chkLaunchDirect = new javax.swing.JCheckBox();
		chkLaunchAsync = new javax.swing.JCheckBox();
		chkRunAsServer = new javax.swing.JCheckBox();
		chkTraceLaunch2 = new javax.swing.JCheckBox();
		jLabel12 = new javax.swing.JLabel();
		lblLaunchFailed = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		lblRetval = new javax.swing.JLabel();
		jLabel16 = new javax.swing.JLabel();
		lblOSError = new javax.swing.JLabel();
		jLabel18 = new javax.swing.JLabel();
		lblTimedOut = new javax.swing.JLabel();
		jLabel20 = new javax.swing.JLabel();
		lblTimeoutvalue = new javax.swing.JLabel();
		jLabel22 = new javax.swing.JLabel();
		jLabel23 = new javax.swing.JLabel();
		jLabel24 = new javax.swing.JLabel();
		jLabel25 = new javax.swing.JLabel();
		cmdRun = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		txtArgs2 = new ExJTextArea();
		cmdSave = new javax.swing.JButton();
		jButton8 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Method Editor");
		setResizable(false);

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Methods"));
		jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		txtFilter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtFilterActionPerformed(evt);
			}
		});
		jPanel1.add(txtFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 20));

		cmdQuery.setMnemonic('Q');
		cmdQuery.setText("Query");
		cmdQuery.setMargin(new java.awt.Insets(2, 2, 2, 2));
		cmdQuery.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdQueryActionPerformed(evt);
			}
		});
		jPanel1.add(cmdQuery, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, -1));

		lstMethods.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				lstMethodsMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(lstMethods);

		jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 420));

		cmdEdit.setMnemonic('E');
		cmdEdit.setText("Edit");
		cmdEdit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdEditActionPerformed(evt);
			}
		});
		jPanel1.add(cmdEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 74, -1));

		cmdNew.setText("New");
		cmdNew.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdNewActionPerformed(evt);
			}
		});
		jPanel1.add(cmdNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, 74, -1));

		cmdDelete.setText("Delete");
		cmdDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdDeleteActionPerformed(evt);
			}
		});
		jPanel1.add(cmdDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 74, -1));

		cmdViewContent.setMnemonic('V');
		cmdViewContent.setText("View Content");
		cmdViewContent.setMargin(new java.awt.Insets(2, 2, 2, 2));
		cmdViewContent.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdViewContentActionPerformed(evt);
			}
		});
		jPanel1.add(cmdViewContent, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 74, -1));
		jPanel2.setLayout(null);

		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel1.setText("Name:");
		jPanel2.add(jLabel1);

		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel2.setText("Method Verb:");
		jPanel2.add(jLabel2);

		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel3.setText("Arguments:");
		jPanel2.add(jLabel3);

		jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel4.setText("Method type:");
		jPanel2.add(jLabel4);

		cmbMethodType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dmbasic", "dmawk", "program", "java" }));
		jPanel2.add(cmbMethodType);

		jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel5.setText("Method content:");
		jPanel2.add(jLabel5);
		jPanel2.add(txtFilePath);
		jPanel2.add(txtMethodName);
		jPanel2.add(txtMethodVerb);

		jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel6.setText("Timeout Min:");
		jPanel2.add(jLabel6);
		jPanel2.add(txtTimeoutMin);

		jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel7.setText("Timeout Default:");
		jPanel2.add(jLabel7);
		jPanel2.add(txtTimeoutDefault);

		jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel8.setText("Timeout Max:");
		jPanel2.add(jLabel8);
		jPanel2.add(txtTimeoutMax);

		cmdBrowse.setText("Browse");
		cmdBrowse.setMargin(new java.awt.Insets(2, 8, 2, 8));
		cmdBrowse.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdBrowseActionPerformed(evt);
			}
		});
		jPanel2.add(cmdBrowse);

		chkLaunchdirect1.setText("Launch Direct");
		jPanel2.add(chkLaunchdirect1);

		chklaunchasync1.setText("Launch async");
		jPanel2.add(chklaunchasync1);

		chkRunAsServer1.setText("Run as Server");
		jPanel2.add(chkRunAsServer1);

		chkTracelaunch1.setText("Trace Launch");
		jPanel2.add(chkTracelaunch1);

		chkUseMethodContent.setText("Use Method Content");
		jPanel2.add(chkUseMethodContent);

		chkUseMethodServer.setText("Use Method Server");
		jPanel2.add(chkUseMethodServer);

		jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel9.setText("Comment:");
		jPanel2.add(jLabel9);
		jPanel2.add(jTextField8);

		jScrollPane3.setViewportView(lstArgs1);

		jPanel2.add(jScrollPane3);

		jTabbedPane1.addTab("Method Attributes", jPanel2);

		jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		lblResultText.setText("N/A");
		lblResultText.setToolTipText("Click to view Result Doc");
		lblResultText.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				lblResultTextMouseClicked(evt);
			}
		});
		jPanel3.add(lblResultText, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, -1, -1));

		lblProcessId.setText("N/A");
		jPanel3.add(lblProcessId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, -1, -1));

		txtTimeout.setText("60");
		jPanel3.add(txtTimeout, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 300, -1));

		chkSaveResults.setSelected(true);
		chkSaveResults.setText("Save Results");
		jPanel3.add(chkSaveResults, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, -1, -1));

		chkLaunchDirect.setText("Launch Direct");
		jPanel3.add(chkLaunchDirect, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, -1, -1));

		chkLaunchAsync.setText("Launch Async");
		jPanel3.add(chkLaunchAsync, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, -1, -1));

		chkRunAsServer.setSelected(true);
		chkRunAsServer.setText("Run as Server");
		jPanel3.add(chkRunAsServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, -1));

		chkTraceLaunch2.setText("Trace Launch");
		jPanel3.add(chkTraceLaunch2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, -1, -1));

		jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel12.setText("Result Doc ID:");
		jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, 100, -1));

		lblLaunchFailed.setText("N/A");
		jPanel3.add(lblLaunchFailed, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, -1, -1));

		jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel14.setText("Process ID:");
		jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 100, -1));

		lblRetval.setText("N/A");
		jPanel3.add(lblRetval, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, -1, -1));

		jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel16.setText("Launch Failed:");
		jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 100, -1));

		lblOSError.setText("N/A");
		jPanel3.add(lblOSError, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, -1, -1));

		jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel18.setText("Return Value:");
		jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 100, -1));

		lblTimedOut.setText("N/A");
		jPanel3.add(lblTimedOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, -1, -1));

		jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel20.setText("OS Error:");
		jPanel3.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, 100, -1));

		lblTimeoutvalue.setText("N/A");
		jPanel3.add(lblTimeoutvalue, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, -1, -1));

		jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel22.setText("Timed Out:");
		jPanel3.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 100, -1));

		jLabel23.setLabelFor(txtTimeout);
		jLabel23.setText("Timeout:");
		jPanel3.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

		jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel24.setText("Timeout Value:");
		jLabel24.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		jPanel3.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 450, 100, -1));

		jLabel25.setLabelFor(txtArgs2);
		jLabel25.setText("Args:");
		jPanel3.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

		cmdRun.setText("Run");
		cmdRun.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdRunActionPerformed(evt);
			}
		});
		jPanel3.add(cmdRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 220, 60, -1));

		txtArgs2.setColumns(20);
		txtArgs2.setRows(5);
		jScrollPane2.setViewportView(txtArgs2);

		jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 300, 80));

		jTabbedPane1.addTab("Run Method", jPanel3);

		cmdSave.setMnemonic('S');
		cmdSave.setText("Save");
		cmdSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmdSaveActionPerformed(evt);
			}
		});

		jButton8.setText("Close");
		jButton8.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton8ActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										layout.createSequentialGroup().add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
												.add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 411, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap())
								.add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(cmdSave).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(jButton8).add(23, 23, 23)))));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup()
						.addContainerGap()
						.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)).add(5, 5, 5).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(cmdSave).add(jButton8)).addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void openMethodForEditing() {

		IDfSession session = null;

		try {
			String id = "";
			if (insertedId  == null) {
			QListItem ql = (QListItem) lstMethods.getSelectedValue();
			 id = ql.getRObjectId();
			} else id = insertedId;
			session = smanager.getSession();
			IDfSysObject obj = (IDfSysObject) session.getObject(new DfId(id));
			IDfMethod o = null;
			this.setTitle("Method Editor - " + obj.getObjectName());
			currentObj = obj;
			txtMethodName.setText(obj.getString("object_name"));
			txtMethodVerb.setText(obj.getString("method_verb"));
			txtTimeoutMin.setText(obj.getString("timeout_min"));
			txtTimeoutDefault.setText(obj.getString("timeout_default"));
			txtTimeoutMax.setText(obj.getString("timeout_max"));

			boolean launchdirect = obj.getBoolean("launch_direct");
			boolean launchasync = obj.getBoolean("launch_direct");
			boolean tracelaunch = obj.getBoolean("trace_launch");
			boolean runasserver = obj.getBoolean("run_as_server");
			boolean usemethodcontent = obj.getBoolean("use_method_content");
			boolean usemethodserver = obj.getBoolean("use_method_server");

			chklaunchasync1.setSelected(launchasync);
			chkLaunchdirect1.setSelected(launchdirect);
			chkRunAsServer1.setSelected(runasserver);
			chkTracelaunch1.setSelected(tracelaunch);
			chkUseMethodContent.setSelected(usemethodcontent);
			chkUseMethodServer.setSelected(usemethodserver);

			int argcount = obj.getValueCount("method_args");
			DefaultListModel model = new DefaultListModel();
			for (int i = 0; i < argcount; i++) {
				String paska = obj.getRepeatingString("method_args", i);
				model.addElement(paska);
			}
			lstArgs1.setModel(model);
			lstArgs1.validate();

			String methodType = obj.getString("method_type");
			System.out.println("'" + methodType + "'");
			if (methodType.length() < 4)
				cmbMethodType.setSelectedItem("program");
			else
				cmbMethodType.setSelectedItem(methodType);

		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

		} finally {
			if (session != null) {
				smanager.releaseSession(session);
			}
		}

	}

	private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtFilterActionPerformed
		// add your handling code here:
	}// GEN-LAST:event_txtFilterActionPerformed

	private void cmdQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdQueryActionPerformed
		// add your handling code here:
		

		String filter = txtFilter.getText();
		IDfCollection col = null;
		IDfSession session = null;
		DefaultListModel model = new DefaultListModel();
		Cursor cur = new Cursor(Cursor.WAIT_CURSOR);

		setCursor(cur);
		try {
			session = smanager.getSession();
			IDfQuery query = new DfQuery();
			if (filter.length() > 0) {
				query.setDQL("select object_name, r_object_id from dm_method where object_name like '" + filter + "%' order by object_name");
			} else {
				query.setDQL("select object_name, r_object_id from dm_method order by object_name");
			}
			col = query.execute(session, DfQuery.DF_READ_QUERY);
			while (col.next()) {
				QListItem qaitem = new QListItem();
				qaitem.setRObjectId(col.getString("r_object_id"));
				qaitem.setName(col.getString("object_name"));
				model.addElement(qaitem);
			}
			lstMethods.setModel(model);
			lstMethods.validate();
		} catch (DfException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

		} finally {
			try {

				col.close();

			} catch (DfException ex) {
				JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

			}
			if (session != null) {
				smanager.releaseSession(session);
			}
			Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);

			setCursor(cur2);
		}

	}// GEN-LAST:event_cmdQueryActionPerformed

	private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdEditActionPerformed
		openMethodForEditing();
	}// GEN-LAST:event_cmdEditActionPerformed

	private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton8ActionPerformed
		this.dispose();
	}// GEN-LAST:event_jButton8ActionPerformed

	private void cmdRunActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdRunActionPerformed
		// add your handling code here:
		IDfSession session = null;
		IDfCollection col = null;
		session = smanager.getSession();
		IDfList args = new DfList();
		// collID = dmAPIGet("apply,c,,DO_METHOD,METHOD,S," & MethodName &
		// ",ARGUMENTS,S, " & allAttributes &
		// ",SAVE_RESULTS,B," & saveResults & ",TIME_OUT,S," & timeOutValue &
		// ",TRACE_LAUNCH,B," & traceLaunch & ",
		// RUN_AS_SERVER,B," & runAsServer & ",LAUNCH_ASYNC,B," & launchAsync & ",LAUNCH_DIRECT,B,"
		// & launchDirect)

		try {
			Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
			setCursor(cur);
			args.appendString("METHOD");
			args.appendString("SAVE_RESULTS");
			args.appendString("TIME_OUT");
			args.appendString("TRACE_LAUNCH");
			args.appendString("RUN_AS_SERVER");
			args.appendString("LAUNCH_ASYNC");
			args.appendString("LAUNCH_DIRECT");
			args.appendString("ARGUMENTS"); // pass three command line arguments
			// build the type list
			IDfList argsTypes = new DfList();
			argsTypes.appendString("S");
			argsTypes.appendString("B");
			argsTypes.appendString("S");
			argsTypes.appendString("B");
			argsTypes.appendString("B");
			argsTypes.appendString("B");
			argsTypes.appendString("B");
			argsTypes.appendString("S"); // command line args is a string
			// build the value list
			IDfList argsValues = new DfList();
			argsValues.append(currentObj.getObjectName());
			if (chkSaveResults.isSelected()) {
				argsValues.appendString("T");
			} else {
				argsValues.appendString("F");
			}
			argsValues.appendString(txtTimeout.getText());
			if (chkTraceLaunch2.isSelected()) {
				argsValues.appendString("T");
			} else {
				argsValues.appendString("F");
			}
			if (chkRunAsServer.isSelected()) {
				argsValues.appendString("T");
			} else {
				argsValues.appendString("F");
			}
			if (chkLaunchAsync.isSelected()) {
				argsValues.appendString("T");
			} else {
				argsValues.appendString("F");
			}
			if (chkLaunchDirect.isSelected()) {
				argsValues.appendString("T");
			} else {
				argsValues.appendString("F");
			}
			argsValues.appendString(txtArgs2.getText()); // command line args to
															// the java program
			// Execute the method
			col = session.apply(null, "DO_METHOD", args, argsTypes, argsValues);
			col.next();
			lblProcessId.setText(col.getString("process_id"));
			lblLaunchFailed.setText(col.getString("launch_failed"));
			lblRetval.setText(col.getString("method_return_val"));
			lblOSError.setText(col.getString("os_system_error"));
			lblTimedOut.setText(col.getString("timed_out"));
			lblTimeoutvalue.setText(col.getString("time_out_length"));
			if (chkSaveResults.isSelected()) {
				Font currentFont = lblResultText.getFont();
				Font newFont = currentFont.deriveFont(Font.BOLD);
				lblResultText.setFont(newFont);
				lblResultText.setText(col.getString("result_doc_id"));
			} else {
				Font currentFont = lblResultText.getFont();
				Font newFont = currentFont.deriveFont(Font.PLAIN);
				lblResultText.setFont(newFont);

				lblResultText.setText("N/A");
			}
		} catch (DfException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
		} finally {
			try {
				col.close();
			} catch (DfException ex) {
			}
			if (session != null) {
				smanager.releaseSession(session);
			}
			Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
			setCursor(cur2);
		}
	}// GEN-LAST:event_cmdRunActionPerformed

	private void lstMethodsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lstMethodsMouseClicked
		// add your handling code here:
		if (evt.getClickCount() == 2) {
			openMethodForEditing();
		}

	}// GEN-LAST:event_lstMethodsMouseClicked

	private void lblResultTextMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblResultTextMouseClicked
		String objid;
		objid = lblResultText.getText();
		if (objid.length() == 16) {
			IDfSession session = null;
			try {
				IDfId id = new DfId(objid);
				session = smanager.getSession();
				IDfSysObject obj = (IDfSysObject) session.getObject(id);
				String filePath = obj.getFile(null);
				File fileToOpen = new File(filePath);
				try {
					Desktop.getDesktop().open(fileToOpen);
				} catch (IOException ex) {
					log.error(ex);
					JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
				}
			} catch (DfException ex) {
				log.error(ex);
				JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
			} finally {
				if (session != null) {
					smanager.releaseSession(session);
				}
			}

		}
	}// GEN-LAST:event_lblResultTextMouseClicked

	private void cmdViewContentActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdViewContentActionPerformed
		QListItem ql = (QListItem) lstMethods.getSelectedValue();
		String objid = ql.getRObjectId();
		if (objid.length() == 16) {
			IDfSession session = null;
			try {
				IDfId id = new DfId(objid);
				session = smanager.getSession();
				IDfSysObject obj = (IDfSysObject) session.getObject(id);

				if (obj.getBoolean("use_method_content")) {
					String filePath = obj.getFile(null);
					File fileToOpen = new File(filePath);
					try {
						Desktop.getDesktop().open(fileToOpen);
					} catch (IOException ex) {
						log.error(ex);
						JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(null, "Method does not have use_method_content attribute set", "Error occured!", JOptionPane.ERROR_MESSAGE);
				}
			} catch (DfException ex) {
				log.error(ex);
				JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
			} finally {
				if (session != null) {
					smanager.releaseSession(session);
				}
			}

		}

	}// GEN-LAST:event_cmdViewContentActionPerformed

	private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdNewActionPerformed

		IDfSession session = null;

		try {
			session = smanager.getSession();
			IDfSysObject obj = (IDfSysObject) session.newObject("dm_method");

			obj.setString("object_name", "changeme");
			obj.setString("method_verb", "dmbasic -eExampleEntryPoint");
			obj.setString("timeout_min", "60");
			obj.setString("timeout_default", "120");
			obj.setString("timeout_max", "240");

			obj.save();

			txtMethodName.setText(obj.getString("object_name"));
			txtMethodVerb.setText(obj.getString("method_verb"));
			txtTimeoutMin.setText(obj.getString("timeout_min"));
			txtTimeoutMax.setText(obj.getString("timeout_max"));
			txtTimeoutDefault.setText(obj.getString("timeout_default"));

			boolean launchdirect = obj.getBoolean("launch_direct");
			boolean launchasync = obj.getBoolean("launch_direct");
			boolean tracelaunch = obj.getBoolean("trace_launch");
			boolean runasserver = obj.getBoolean("run_as_server");
			boolean usemethodcontent = obj.getBoolean("use_method_content");
			boolean usemethodserver = obj.getBoolean("use_method_server");

			chklaunchasync1.setSelected(launchasync);
			chkLaunchdirect1.setSelected(launchdirect);
			chkRunAsServer1.setSelected(runasserver);
			chkTracelaunch1.setSelected(tracelaunch);
			chkUseMethodContent.setSelected(usemethodcontent);
			chkUseMethodServer.setSelected(usemethodserver);

			int argcount = obj.getValueCount("method_args");
			DefaultListModel model = new DefaultListModel();
			for (int i = 0; i < argcount; i++) {
				String paska = obj.getRepeatingString("method_args", i);
				model.addElement(paska);
			}
			lstArgs1.setModel(model);
			lstArgs1.validate();
			String methodType = obj.getString("method_type");
			cmbMethodType.setSelectedItem(methodType);
			this.setTitle("Method Editor - " + obj.getObjectName());
			currentObj = obj;

		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

		}

	}// GEN-LAST:event_cmdNewActionPerformed

	private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdDeleteActionPerformed
		// add your handling code here:
		QListItem ql = (QListItem) lstMethods.getSelectedValue();
		String objid = ql.getRObjectId();
		if (objid.length() == 16) {
			IDfSession session = null;
			try {
				IDfId id = new DfId(objid);
				session = smanager.getSession();
				IDfSysObject obj = (IDfSysObject) session.getObject(id);
				int answer = JOptionPane.showConfirmDialog(this, "Destroy Method: " + obj.getObjectName() + ". Are you sure??", "Confirm", JOptionPane.YES_NO_OPTION);
				if (answer == JOptionPane.YES_OPTION) {
					obj.destroy();
				}
			} catch (DfException ex) {
				log.error(ex);
				JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
			}
		}

	}// GEN-LAST:event_cmdDeleteActionPerformed

	private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdSaveActionPerformed
		IDfSession session = null;
		try {
			session = smanager.getSession();
			IDfSysObject obj = currentObj;
			obj.setString("object_name", txtMethodName.getText());
			obj.setString("method_verb", txtMethodVerb.getText());
			obj.setString("timeout_min", txtTimeoutMin.getText());
			obj.setString("timeout_default", txtTimeoutDefault.getText());
			obj.setString("timeout_max", txtTimeoutMax.getText());

			obj.save();

			if (txtFilePath.getText().length() > 0) {
				obj.setContentType("text");
				obj.setFile(txtFilePath.getText());
			}

			obj.setBoolean("launch_direct", chkLaunchdirect1.isSelected());
			obj.setBoolean("launch_direct", chkLaunchdirect1.isSelected());
			obj.setBoolean("trace_launch", chkTracelaunch1.isSelected());
			obj.setBoolean("run_as_server", chkRunAsServer1.isSelected());
			obj.setBoolean("use_method_content", chkUseMethodContent.isSelected());
			obj.setBoolean("use_method_server", chkUseMethodServer.isSelected());

			String methodType = (String) cmbMethodType.getSelectedItem();
			if (methodType.equals("program"))
				methodType = "";
			obj.setString("method_type", methodType);
			this.setTitle("Method Editor - " + obj.getObjectName());
			obj.save();
			currentObj = obj;
		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
		}

	}// GEN-LAST:event_cmdSaveActionPerformed

	private void cmdBrowseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdBrowseActionPerformed

		File selFile;
		JFileChooser fc = new JFileChooser();
		fc.showOpenDialog(null);
		selFile = fc.getSelectedFile();
		String filepath = selFile.getPath();
		txtFilePath.setText(filepath);

	}// GEN-LAST:event_cmdBrowseActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new MethodFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox chkLaunchAsync;
	private javax.swing.JCheckBox chkLaunchDirect;
	private javax.swing.JCheckBox chkLaunchdirect1;
	private javax.swing.JCheckBox chkRunAsServer;
	private javax.swing.JCheckBox chkRunAsServer1;
	private javax.swing.JCheckBox chkSaveResults;
	private javax.swing.JCheckBox chkTraceLaunch2;
	private javax.swing.JCheckBox chkTracelaunch1;
	private javax.swing.JCheckBox chkUseMethodContent;
	private javax.swing.JCheckBox chkUseMethodServer;
	private javax.swing.JCheckBox chklaunchasync1;
	private javax.swing.JComboBox cmbMethodType;
	private javax.swing.JButton cmdBrowse;
	private javax.swing.JButton cmdDelete;
	private javax.swing.JButton cmdEdit;
	private javax.swing.JButton cmdNew;
	private javax.swing.JButton cmdQuery;
	private javax.swing.JButton cmdRun;
	private javax.swing.JButton cmdSave;
	private javax.swing.JButton cmdViewContent;
	private javax.swing.JButton jButton8;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel20;
	private javax.swing.JLabel jLabel22;
	private javax.swing.JLabel jLabel23;
	private javax.swing.JLabel jLabel24;
	private javax.swing.JLabel jLabel25;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTextField jTextField8;
	private javax.swing.JLabel lblLaunchFailed;
	private javax.swing.JLabel lblOSError;
	private javax.swing.JLabel lblProcessId;
	private javax.swing.JLabel lblResultText;
	private javax.swing.JLabel lblRetval;
	private javax.swing.JLabel lblTimedOut;
	private javax.swing.JLabel lblTimeoutvalue;
	private javax.swing.JList lstArgs1;
	private javax.swing.JList lstMethods;
	private ExJTextArea txtArgs2;
	private javax.swing.JTextField txtFilePath;
	private javax.swing.JTextField txtFilter;
	private javax.swing.JTextField txtMethodName;
	private javax.swing.JTextField txtMethodVerb;
	private javax.swing.JTextField txtTimeout;
	private javax.swing.JTextField txtTimeoutDefault;
	private javax.swing.JTextField txtTimeoutMax;
	private javax.swing.JTextField txtTimeoutMin;

	// End of variables declaration//GEN-END:variables

	public void setId(String objid) {
		this.insertedId = objid;
		
	}

	public void update() {
		openMethodForEditing();
		
	}
}
