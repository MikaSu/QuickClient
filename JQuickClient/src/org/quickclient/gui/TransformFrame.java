/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TransformFrame.java
 *
 * Created on 21.6.2009, 23:46:32
 */
package org.quickclient.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import net.miginfocom.swing.MigLayout;

import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.ExJTextField;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.DfList;
import com.documentum.fc.common.IDfList;


/**
 *
 * @author Mika
 */
public class TransformFrame extends javax.swing.JFrame {

    private DocuSessionManager smanager;
    private DefaultTableModel profileModel;
    private String docid = "";
    private String profileId;
    Logger log = Logger.getLogger(TransformFrame.class);

    /** Creates new form TransformFrame */
    public TransformFrame() {

        initComponents();
        smanager = DocuSessionManager.getInstance();
        initModel();
        initTable();
    }

    public TransformFrame(String objid) {
        this.docid = objid;
        initComponents();
        smanager = DocuSessionManager.getInstance();
        initModel();
        initTable();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    EntityResolver resolver = new EntityResolver() {
        
        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
                       String empty = "";
            ByteArrayInputStream bais = new ByteArrayInputStream(empty.getBytes());
            //System.out.println("resolveEntity:" + publicId + "|" + systemId);
            return new InputSource(bais);
        }
    };
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        tabPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfiles = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        TransformPanel = new javax.swing.JScrollPane();
        TransformPane2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cmdTransform = new javax.swing.JButton();
        cmdNext1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Transform profiles"));

        tblProfiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProfiles);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPane.addTab("tab1", jPanel1);

        javax.swing.GroupLayout TransformPane2Layout = new javax.swing.GroupLayout(TransformPane2);
        TransformPane2.setLayout(TransformPane2Layout);
        TransformPane2Layout.setHorizontalGroup(
            TransformPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );
        TransformPane2Layout.setVerticalGroup(
            TransformPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        TransformPanel.setViewportView(TransformPane2);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("x"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 617, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TransformPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(TransformPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabPane.addTab("tab2", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );

        tabPane.addTab("tab3", jPanel3);

        cmdTransform.setText("Transform");
        cmdTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTransformActionPerformed(evt);
            }
        });

        cmdNext1.setText("Next");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(cmdNext1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdTransform)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdNext1)
                    .addComponent(cmdTransform)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        tabPane.setSelectedIndex(1);
        int i = tblProfiles.getSelectedRow();
        String profileid = (String) profileModel.getValueAt(i, 0);
        this.profileId = profileid;
        //System.out.println(profileid);
        IDfSession session = smanager.getSession();
        ArrayList<String> sourceFormats = new ArrayList<String>();
        ArrayList<MediaTransformationFormats> allFormats = new ArrayList<MediaTransformationFormats>();
        try {
            IDfSysObject profileObj = (IDfSysObject) session.getObject(new DfId(profileid));
            ByteArrayInputStream bais = profileObj.getContent();
            InputStream is = bais;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);

            DocumentBuilder builder = factory.newDocumentBuilder();
            builder.setEntityResolver(resolver);
            Document doc = builder.parse(is);

            XPath xpath = XPathFactory.newInstance().newXPath();
            NodeList nodes = null;
            nodes = (NodeList) xpath.evaluate("/Profile/Formats/Format/@source", doc, XPathConstants.NODESET);
            for (int xx = 0; xx < nodes.getLength(); xx++) {
                Node node = nodes.item(xx);
                ////System.out.println("s: " + node.getNodeValue());
                if (!sourceFormats.contains(node.getNodeValue())) {
                    sourceFormats.add(node.getNodeValue());
                }
            }
            for (String s : sourceFormats) {
                MediaTransformationFormats mtf = new MediaTransformationFormats();
                mtf.setSourceFormat(s);
                nodes = (NodeList) xpath.evaluate("/Profile/Formats/Format[@source='" + s + "']/@target", doc, XPathConstants.NODESET);
                for (int xx = 0; xx < nodes.getLength(); xx++) {
                    Node node = nodes.item(xx);
                    //System.out.println("t: " + node.getNodeValue());
                    mtf.appendTargetFormat(node.getNodeValue());
                }
            }
            //System.out.println(sourceFormats);
            TransformPane2.setLayout(new MigLayout("wrap 6"));
            nodes = (NodeList) xpath.evaluate("/Profile/Transcodings/Transcode/Parameter", doc, XPathConstants.NODESET);
            for (int xx = 0; xx < nodes.getLength(); xx++) {
                Node node = nodes.item(xx);
                NamedNodeMap map = node.getAttributes();
                String name = map.getNamedItem("name").getTextContent();
                String label = map.getNamedItem("label").getTextContent();
                String controltype = map.getNamedItem("controltype").getTextContent();
                String datatype = map.getNamedItem("datatype").getTextContent();
                //System.out.println("name " + name);
                //System.out.println("label " + label);
                //System.out.println("controltype " + controltype);
                //System.out.println("datatype " + datatype);
                ExJTextField objidfield = new ExJTextField();
                objidfield.setName("r_object_id");
                objidfield.putClientProperty("haschanged", false);
                TransformPane2.add(new JLabel(label));//"span, grow");
                if (controltype.equals("text")) {
                    ExJTextField field = new ExJTextField(controltype);
                    field.setName(name);
                    TransformPane2.add(field, "span, grow,wrap");
                } else if (controltype.equals("color-picker")) {
                    final ExJTextField field = new ExJTextField(controltype);
                    field.setName(name);
                    TransformPane2.add(field, "grow");
                    JButton butt = new JButton("Choose Color");
                    butt.setName(label);
                 
                    TransformPane2.add(butt, "span, grow,wrap");
                    butt.addActionListener(new ActionListener() {

                        
                        public void actionPerformed(ActionEvent e) {
                            
                            Color color = JColorChooser.showDialog(rootPane, "Color...", new Color(0, 0, 0));
                            //System.out.println(color);

                            float[] foo = color.getRGBColorComponents(null);
                            for (int i = 0; i < foo.length; i++) {
                                //System.out.println(foo[i]);
                                field.setBackground(color);
//TODO ongelmia 0-arvojen kanssa..
                                field.setText("#" + java.lang.Integer.toHexString(color.getRed()).toUpperCase() + java.lang.Integer.toHexString(color.getGreen()).toUpperCase() + java.lang.Integer.toHexString(color.getBlue()).toUpperCase());
                            }
                        }
                    });
                } else if (controltype.equals("range")) {
                    String minValue = xpath.evaluate("./ValueRange/MinValue", node);
                    String maxValue = xpath.evaluate("./ValueRange/MaxValue", node);
                    /*
                    Set tempNode2 = tempNode.selectSingleNode("ValueRange/MinValue")
                    minValue = tempNode2.Text
                    'MsgBox minValue
                    Set tempNode2 = tempNode.selectSingleNode("ValueRange/MaxValue")
                    maxValue = tempNode2.Text
                    minmaxValue = minValue & " - " & maxValue */
                    JLabel label1 = new JLabel("Range '" + minValue + "' - '" + maxValue + "': ");
                    TransformPane2.add(label1);
                    ExJTextField field = new ExJTextField(controltype);
                    field.setName(name);
                    TransformPane2.add(field, "span, grow,wrap");

                } else if (controltype.equals("list")) {

                    //Set nodeList2 = tempNode.selectNodes("ValueList/Value")
                    JComboBox box = new JComboBox();
                    box.setName(name);

                    TransformPane2.add(box, "span, grow,wrap");
                    NodeList listNodes = (NodeList) xpath.evaluate("./ValueList/Value", node, XPathConstants.NODESET);
                    for (int y = 0; y < listNodes.getLength(); y++) {
                        String value = listNodes.item(y).getTextContent();
                        String combolabel = "";
                        NamedNodeMap nnmap =listNodes.item(y).getAttributes();
                        for (int ii=0;ii<nnmap.getLength();ii++) {
                            Node attrNode = nnmap.getNamedItem("label");
                            combolabel = attrNode.getTextContent();
                        }
                        box.addItem(value);
                    }
                }
            }

        } catch (DfException ex) {
            log.error(ex);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (SAXException se) {
            se.printStackTrace();
        } catch (XPathExpressionException xpe) {
            xpe.printStackTrace();
        }



}//GEN-LAST:event_cmdNext1ActionPerformed

    private void cmdTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTransformActionPerformed
        Component[] components = TransformPane2.getComponents();
        String confObjId = "";
        String confObj = "-profile_id=" + "\"" + this.profileId + "\"" + " ";
        System.out.println("profileid: " + this.profileId);
        for (int i = 0; i < components.length; i++) {
            //System.out.println(components[i]);
            Component c = components[i];
            if (c instanceof ExJTextField) {
                ExJTextField x = (ExJTextField) c;
                confObj = confObj + "-" + x.getName() + "=" + "\"" + x.getText() + "\"" + " ";
            } else if (c instanceof JComboBox) {
                JComboBox box = (JComboBox) c;
                confObj = confObj + "-" + box.getName() + "=" + "\"" + box.getSelectedItem().toString() + "\"" + " ";
            }
        }
        System.out.println(confObj);
        IDfSession session = smanager.getSession();
        IDfCollection col = null;
        IDfList args = new DfList();
        IDfList argsTypes = new DfList();
        IDfList argsValues = new DfList();
        try {
            IDfSysObject configobj = (IDfSysObject) session.newObject("dm_document");
            configobj.setContentType("text");
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            baos.write(confObj.getBytes(), 0, confObj.length());
            configobj.setContent(baos);
            configobj.setObjectName("transcode_config");
            configobj.link("/Temp");
            configobj.save();
            confObjId = configobj.getObjectId().getId();
            args.appendString("PAGE");
            argsTypes.appendString("I");
            argsValues.appendString("0");
            args.appendString("PRIORITY");
            argsTypes.appendString("I");
            argsValues.appendString("7");
            args.appendString("SOURCE_FORMAT");
            argsTypes.appendString("S");
            argsValues.appendString("jpeg");
            args.appendString("MESSAGE");
            argsTypes.appendString("S");
            argsValues.appendString("-render=\"true\" -notifier_user=\"dmadmin\" -arg_object_id=\"" + confObjId + "\"");
            args.appendString("TARGET_FORMAT");
            argsTypes.appendString("S");
            argsValues.appendString("jpeg");

            col = session.apply(this.docid, "TRANSCODE_CONTENT", args, argsTypes, argsValues);
            col.next();
            System.out.println(args);
            System.out.println(argsTypes);
            System.out.println(argsValues);
            System.out.println(col.dump());
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    log.error(ex);
                }
            }
        }

}//GEN-LAST:event_cmdTransformActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel TransformPane2;
    private javax.swing.JScrollPane TransformPanel;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdTransform;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTable tblProfiles;
    // End of variables declaration//GEN-END:variables

    private void initModel() {
        profileModel = new DefaultTableModel();
        profileModel.addColumn(".");
        profileModel.addColumn(".");
        profileModel.addColumn(".");

        tblProfiles.setModel(profileModel);

        int lastIndex = tblProfiles.getColumnCount();
        tblProfiles.getColumnModel().removeColumn(tblProfiles.getColumnModel().getColumn(lastIndex - 1));
        tblProfiles.setModel(profileModel);
    }

    private void initTable() {
        IDfSession session = smanager.getSession();
        IDfQuery query = new DfQuery();
        IDfCollection col = null;
        query.setDQL("select r_object_id, object_name, title, subject from dm_media_profile");
        try {
            col = query.execute(session, DfQuery.DF_CACHE_QUERY);
            while (col.next()) {
                String id = col.getString("r_object_id");
                String name = col.getString("object_name");
                String p = "xx";
                Vector<String> v = new Vector<String>();
                v.add(id);
                v.add(name);
                v.add(p);
                profileModel.addRow(v);
            }
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    log.error(ex);
                }
            }
        }
        tblProfiles.validate();
    }
}
