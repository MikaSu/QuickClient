/*
 * GroupSelectorFrame.java
 *
 * Created on 5. marraskuuta 2006, 20:35
 */
package org.quickclient.gui;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.UserorGroupSelectorData;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;


/**
 *
 * @author  Administrator
 */
public class UserorGroupSelectorFrame extends javax.swing.JFrame {

    Logger log = Logger.getLogger(UserorGroupSelectorFrame.class);

    /** Creates new form GroupSelectorFrame
     * @param listener
     * @param data
     */
    public UserorGroupSelectorFrame(ActionListener listener, UserorGroupSelectorData data) {
        initComponents();
        jScrollPane1.getViewport().setBackground(Color.WHITE);
        smanager = DocuSessionManager.getInstance();
        cmdSelect.addActionListener(listener);
        this.groupdata = data;
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        setGroupmodel(model);
        getGroupmodel().addColumn(".");
        getGroupmodel().addColumn("User Name");
        tblUserGroupList.setModel(getGroupmodel());

        tblUserGroupList.getColumnModel().getColumn(0).setCellRenderer(new GroupOrUserRenderer());
        TableColumn col = tblUserGroupList.getColumnModel().getColumn(0);
        col.setPreferredWidth(22);
        col.setMaxWidth(22);
        col.setWidth(22);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPaneli1 = new javax.swing.JPanel();
        txtUserFilter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmdQuery = new javax.swing.JButton();
        chkShowUsers = new javax.swing.JCheckBox();
        chkShowGroups = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserGroupList = new javax.swing.JTable();
        cmdSelect = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPaneli1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        jPaneli1.setName("z"); // NOI18N
        jPaneli1.setRequestFocusEnabled(false);

        txtUserFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserFilterActionPerformed(evt);
            }
        });
        txtUserFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUserFilterKeyTyped(evt);
            }
        });

        jLabel1.setText("Name:");

        cmdQuery.setMnemonic('q');
        cmdQuery.setText("Query");
        cmdQuery.setMargin(new java.awt.Insets(1, 4, 1, 4));
        cmdQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdQueryActionPerformed(evt);
            }
        });

        chkShowUsers.setSelected(true);
        chkShowUsers.setText("Show Users");
        chkShowUsers.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkShowUsers.setMargin(new java.awt.Insets(0, 0, 0, 0));

        chkShowGroups.setSelected(true);
        chkShowGroups.setText("Show Groups");
        chkShowGroups.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkShowGroups.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPaneli1Layout = new org.jdesktop.layout.GroupLayout(jPaneli1);
        jPaneli1.setLayout(jPaneli1Layout);
        jPaneli1Layout.setHorizontalGroup(
            jPaneli1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPaneli1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(2, 2, 2)
                .add(jPaneli1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chkShowGroups)
                    .add(chkShowUsers)
                    .add(jPaneli1Layout.createSequentialGroup()
                        .add(txtUserFilter, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdQuery)))
                .addContainerGap())
        );
        jPaneli1Layout.setVerticalGroup(
            jPaneli1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPaneli1Layout.createSequentialGroup()
                .add(jPaneli1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txtUserFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdQuery))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chkShowUsers)
                .add(2, 2, 2)
                .add(chkShowGroups)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblUserGroupList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblUserGroupList.setRowHeight(20);
        tblUserGroupList.setShowHorizontalLines(false);
        tblUserGroupList.setShowVerticalLines(false);
        tblUserGroupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserGroupListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUserGroupList);

        cmdSelect.setText("Select");
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(256, 256, 256)
                .add(cmdSelect)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdCancel)
                .addContainerGap())
            .add(jPaneli1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPaneli1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdCancel)
                    .add(cmdSelect))
                .addContainerGap())
        );

        jPaneli1.getAccessibleContext().setAccessibleName("z");
        jPaneli1.getAccessibleContext().setAccessibleDescription("z");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void txtUserFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserFilterActionPerformed

        cmdQueryActionPerformed(evt);
    }//GEN-LAST:event_txtUserFilterActionPerformed

    private void tblUserGroupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserGroupListMouseClicked

        int row = tblUserGroupList.getSelectedRow();
        Vector v = (Vector) getGroupmodel().getDataVector().elementAt(row);
        ////System.out.println(v);
        String Stringi = (String) v.elementAt(1);
        String isuser = (String) v.elementAt(0);

        groupdata.setUserorGroupname(Stringi);
        if (isuser.equals("0")) {
            groupdata.setIsgroup(false);
        } else {
            groupdata.setIsgroup(true);
        }
    }//GEN-LAST:event_tblUserGroupListMouseClicked

    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed

        int row = tblUserGroupList.getSelectedRow();
        if (row != -1) {
            Vector v = (Vector) getGroupmodel().getDataVector().elementAt(row);
            ////System.out.println(v);
            String Stringi = (String) v.elementAt(1);
            String isuser = (String) v.elementAt(0);
            groupdata.setUserorGroupname(Stringi);
            if (isuser.equals("0")) {
                groupdata.setIsgroup(false);
            } else {
                groupdata.setIsgroup(true);
            }
            this.dispose();
        }
    }//GEN-LAST:event_cmdSelectActionPerformed

    private void cmdQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdQueryActionPerformed

        String queryFilter = txtUserFilter.getText();
        IDfCollection col = null;
        IDfQuery query = new DfQuery();
        listArray = new HashMap<String, String>();
        groupmodel.setRowCount(0);
        if (this.chkShowGroups.isSelected() && this.chkShowUsers.isSelected()) {
            if (queryFilter.length() > 0) {
                query.setDQL("select user_name,r_is_group from dm_user where user_name like '" + queryFilter + "%' order by user_name");
            } else {
                query.setDQL("select user_name,r_is_group from dm_user order by user_name");
            }
        }

        if (!this.chkShowGroups.isSelected() && this.chkShowUsers.isSelected()) {
            if (queryFilter.length() > 0) {
                query.setDQL("select user_name,r_is_group from dm_user where r_is_group = 0 and user_name like '" + queryFilter + "%' order by user_name");
            } else {
                query.setDQL("select user_name,r_is_group from dm_user where r_is_group = 0 order by user_name");
            }
        }

        if (this.chkShowGroups.isSelected() && !this.chkShowUsers.isSelected()) {
            if (queryFilter.length() > 0) {
                query.setDQL("select user_name,r_is_group from dm_user  where r_is_group = 1 and where user_name like '" + queryFilter + "%' order by user_name");
            } else {
                query.setDQL("select user_name,r_is_group from dm_user  where r_is_group = 1 order by user_name");
            }
        }
        IDfSession session = null;
        try {
            session = smanager.getSession();
            col = query.execute(session, IDfQuery.DF_READ_QUERY);
            while (col.next()) {
                Vector<String> a = new Vector<String>();

                String isgroup = col.getString("r_is_group");
                String username = col.getString("user_name");
                a.add(isgroup);
                a.add(username);
                groupmodel.addRow(a);
                listArray.put(username, isgroup);
            }
            col.close();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
        tblUserGroupList.setModel(groupmodel);
        tblUserGroupList.validate();

    }//GEN-LAST:event_cmdQueryActionPerformed
    /*
    private void txtUserFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserFilterKeyTyped
    }//GEN-LAST:event_txtUserFilterKeyTyped

private void txtUserFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserFilterKeyReleased
    //  add your handling code here:
}//GEN-LAST:event_txtUserFilterKeyReleased
     */

    private void txtUserFilterKeyReleased(java.awt.event.KeyEvent evt) {
        String joo = txtUserFilter.getText().toLowerCase();
        groupmodel.setRowCount(0);
        Set keys = listArray.keySet();
        Iterator i = keys.iterator();
        while (i.hasNext()) {
            String value = (String) i.next();
            if (value.toLowerCase().contains(joo)) {
                Vector<String> kakkavektor = new Vector<String>();
                kakkavektor.add(listArray.get(value));
                kakkavektor.add(value);
                groupmodel.addRow(kakkavektor);
            }
        }
        tblUserGroupList.setModel(groupmodel);
        tblUserGroupList.validate();

    }

    private void txtUserFilterKeyTyped(java.awt.event.KeyEvent evt) {
    }
    private UserorGroupSelectorData groupdata;
    private DefaultTableModel groupmodel;
    private DocuSessionManager smanager;

    public DefaultTableModel getGroupmodel() {
        return groupmodel;
    }

    public void setGroupmodel(DefaultTableModel groupmodel) {
        this.groupmodel = groupmodel;
    }
    private HashMap<String, String> listArray = new HashMap<String, String>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkShowGroups;
    private javax.swing.JCheckBox chkShowUsers;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdQuery;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPaneli1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblUserGroupList;
    private javax.swing.JTextField txtUserFilter;
    // End of variables declaration//GEN-END:variables
}
