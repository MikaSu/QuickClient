/*
 * InboxItemForm.java
 *
 * Created on 31. toukokuuta 2008, 9:17
 */
package org.quickclient.gui;

import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfPackage;
import com.documentum.fc.client.IDfQueueItem;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.client.IDfWorkitem;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.DfLogger;
import com.documentum.fc.common.IDfId;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.DokuData;
import org.quickclient.classes.SwingHelper;

/**
 *
 * @author  Administrator
 */
public class InboxItemForm extends javax.swing.JFrame {

    boolean signoffrequired = false;
    TablePopUpMenu myPopUp;
    private String itemid;
    DefaultTableModel inboxModel;
    private DocuSessionManager smanager;
    Logger log = Logger.getLogger(InboxItemForm.class);
    private FormatRenderer formatrenderer;

    /** Creates new form InboxItemForm */
    public InboxItemForm() {
        initComponents();

        this.jScrollPane1.getViewport().setBackground(Color.WHITE);

    }

    /** Creates new form InboxItemForm */
    public InboxItemForm(String itemid) {
        initComponents();
        lblSignOff.setVisible(false);
        txtPassword.setVisible(false);
        this.jScrollPane1.getViewport().setBackground(Color.WHITE);
        formatrenderer = new FormatRenderer();
        initializeColumns();
        myPopUp = new TablePopUpMenu();
        myPopUp.setTable(packageTable);
        this.itemid = itemid;
        smanager = DocuSessionManager.getInstance();
        IDfSession session = null;
        //SwingHelper sh = new SwingHelper();
        SwingHelper.showMessage("Item Acquired.");
        try {
            session = smanager.getSession();
            IDfQueueItem inboxitem = (IDfQueueItem) session.getObject(new DfId(itemid));
            System.out.println(inboxitem.getTaskType());
            IDfWorkitem witem = inboxitem.getWorkitem();
            System.out.println("witem: " + witem);
            if (witem.getInt("r_runtime_state") == IDfWorkitem.DF_WI_STATE_DORMANT) {
                witem.acquire();
            }
            
            signoffrequired = witem.getBoolean("r_sign_off_req");
        } catch (DfException w) {
            log.error(w);
            JOptionPane.showMessageDialog(null, w.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

        } finally {
            smanager.releaseSession(session);
        }
        if (signoffrequired) {
            lblSignOff.setVisible(true);
            txtPassword.setVisible(true);
        }
        initTable();

    }

    public void initializeColumns() {
        packageTable.setAutoCreateColumnsFromModel(true);
        inboxModel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        inboxModel.setColumnCount(0);
        inboxModel.addColumn(".");
        inboxModel.addColumn(".");

        // default column values
        inboxModel.addColumn("Name");
        inboxModel.addColumn("Data");
        packageTable.setModel(inboxModel);
        packageTable.setRowHeight(22);
        packageTable.getColumnModel().getColumn(1).setCellRenderer(formatrenderer);
        packageTable.getColumnModel().getColumn(0).setCellRenderer(new LockRenderer());
        packageTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        packageTable.setEditingRow(1);

        for (int i = 0; i < 3; i++) {
            TableColumn col = packageTable.getColumnModel().getColumn(i);
            if (i == 0 || i == 1) {
                col.setPreferredWidth(22);
                col.setMaxWidth(22);
            } else {
                col.setPreferredWidth(200);
            }
        }
        int lastIndex = packageTable.getColumnCount();
        packageTable.getColumnModel().removeColumn(packageTable.getColumnModel().getColumn(lastIndex - 1));

    }

    public String getIDfromTable() {
        int row = packageTable.getSelectedRow();
        Vector v = (Vector) inboxModel.getDataVector().elementAt(row);
        DokuData qidata = (DokuData) v.lastElement();
        return qidata.getObjID();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        imgLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        packageTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblSignOff = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cmdFinish = new javax.swing.JButton();
        cmdClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imgLabel.setText(" ");
        jPanel3.add(imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        packageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        packageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                packageTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(packageTable);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 550, 100));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Attachments:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, -1));

        lblSignOff.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSignOff.setText("Signoff Required.  Password:");
        jPanel4.add(lblSignOff, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 160, 20));
        jPanel4.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 180, -1));

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 290));

        jTabbedPane1.addTab("Info", jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Comments", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Progress", jPanel1);

        cmdFinish.setText("Finish");
        cmdFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFinishActionPerformed(evt);
            }
        });

        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdFinish)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClose)
                    .addComponent(cmdFinish))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cmdFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFinishActionPerformed
// TODO add your handling code here:
    IDfSession session = null;
    try {
        session = smanager.getSession();
        IDfQueueItem inboxitem = (IDfQueueItem) session.getObject(new DfId(itemid));
        IDfWorkitem witem = inboxitem.getWorkitem();

        boolean signoffrequired = witem.getBoolean("r_sign_off_req");
        int state = witem.getInt("r_runtime_state");
        if (state == IDfWorkitem.DF_WI_STATE_DORMANT) {
            witem.acquire();
            //System.out.println("acquired.");

        }
        if (signoffrequired) {
            String username = session.getUser("").getUserName();
            String pass = txtPassword.getText();
            if (pass.length() == 0) {
                JOptionPane.showMessageDialog(null, "Signoff is required \n Please sign with your password to finish workitem.", "Password needed!", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                witem.signoff(username, pass, "Workitem Finished.");
            }
        }

        if (state == IDfWorkitem.DF_WI_STATE_ACQUIRED) {
            witem.complete();
            //System.out.println("completed.");

        }


    } catch (DfException ex) {
        DfLogger.error(this, ex.getMessage(), null, ex);
        JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

    } finally {
        if (session != null) {
            smanager.releaseSession(session);
        }
    }
    this.dispose();
}//GEN-LAST:event_cmdFinishActionPerformed

private void packageTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packageTableMouseReleased
    int butt = evt.getButton();
    ////System.out.println("butt on: " + butt);
    if (butt == MouseEvent.BUTTON3) {
        myPopUp.show(evt.getComponent(), evt.getX(), evt.getY());
    }
}//GEN-LAST:event_packageTableMouseReleased

private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed

    this.dispose();
}//GEN-LAST:event_cmdCloseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdFinish;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblSignOff;
    private javax.swing.JTable packageTable;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
        //throw new UnsupportedOperationException("Not yet implemented");
        IDfSession session = null;
        IDfCollection col = null;
        try {
            session = smanager.getSession();

            IDfQueueItem inboxitem = (IDfQueueItem) session.getObject(new DfId(itemid));
            String xx = inboxitem.getString("item_id");
            //System.out.println("xx: " + xx);
            if (xx.startsWith("4a")) {
                IDfWorkitem witem = inboxitem.getWorkitem();
                col = witem.getPackages("");
                while (col.next()) {
                    String pid = col.getString("r_object_id");
                    IDfPackage packagex = (IDfPackage) session.getObject(new DfId(pid));
                    int cunt = packagex.getComponentIdCount();
                    for (int i = 0; i < cunt; i++) {
                        IDfId attid = packagex.getComponentId(i);
                        IDfSysObject obj = (IDfSysObject) session.getObject(attid);
                        //System.out.println(obj.getObjectName());
                        Vector<Object> vector = new Vector<Object>();
                        boolean isvirtualdoc = obj.getBoolean("r_is_virtual_doc");
                        vector.add(obj.getString("r_lock_owner"));
                        if (isvirtualdoc) {
                            vector.add("virtual,virtual");
                        } else {
                            vector.add(obj.getString("a_content_type") + "," + obj.getString("r_object_type"));
                        }
                        vector.add(obj.getString("object_name"));
                        DokuData data = new DokuData(obj.getString("r_object_id"));
                        vector.add(data);
                        inboxModel.addRow(vector);

                    }
                }
                packageTable.validate();
            }
            if (xx.startsWith("09")) {
                IDfSysObject obj = (IDfSysObject) session.getObject(new DfId(xx));
                //System.out.println(obj.getObjectName());
                Vector<Object> vector = new Vector<Object>();
                boolean isvirtualdoc = obj.getBoolean("r_is_virtual_doc");
                vector.add(obj.getString("r_lock_owner"));
                if (isvirtualdoc) {
                    vector.add("virtual,virtual");
                } else {
                    vector.add(obj.getString("a_content_type") + "," + obj.getString("r_object_type"));
                }
                vector.add(obj.getString("object_name"));
                DokuData data = new DokuData(obj.getString("r_object_id"));
                vector.add(data);
                inboxModel.addRow(vector);
                packageTable.validate();
            }



        } catch (DfException ex) {
            log.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    log.error(ex);
                }
            }
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
    }
}
