/*
 * AttrEditor.java
 *
 * Created on 29. lokakuuta 2006, 23:00
 */
package org.quickclient.gui;

import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.SwingHelper;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfPersistentObject;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.IDfId;


/**
 *
 * @author  Administrator
 */
public class AttrEditorFrame extends javax.swing.JFrame {

    DocuSessionManager smanager;
    Logger log = Logger.getLogger(AttrEditorFrame.class);

    public AttrEditorFrame() {
        initComponents();
        smanager = DocuSessionManager.getInstance();
        //tablemodel = new DefaultTableModel();
        tablemodel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                boolean jeps = false;
                if (column == 1) {
                    jeps = true;
                }
                return jeps;
            }
        };

        tablemodel.addColumn("Attribute Name");
        tablemodel.addColumn("Attribute Value");
        tablemodel.addColumn("attrtype");
        tablemodel.addColumn("ind");
        tablemodel.addColumn("attrname");

        attrTable.setAutoCreateColumnsFromModel(false);
        attrTable.setModel(tablemodel);
        changeVector = new Vector<Object>();
        TableModelListener x = new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                ////System.out.println("Change!");
                ////System.out.println(e.toString());
                int selRow = attrTable.getSelectedRow();
                changeVector.add(attrTable.getValueAt(selRow, 0));
            }
        };
        setA(x);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AttrEditorPopUp = new javax.swing.JPopupMenu();
        jSeparator2 = new javax.swing.JSeparator();
        mnuAttrEditor = new javax.swing.JMenuItem();
        mnuShowDump = new javax.swing.JMenuItem();
        mnuViewContent = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mnuDestroy = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        mnuAppend = new javax.swing.JMenuItem();
        mnuAddAfter = new javax.swing.JMenuItem();
        mnuAddBefore = new javax.swing.JMenuItem();
        repeatingattradder = new javax.swing.JPopupMenu();
        mnuAppendValue = new javax.swing.JMenuItem();
        mnuInsertBefore = new javax.swing.JMenuItem();
        mnuInsertAfter = new javax.swing.JMenuItem();
        mnuRemoveRepeating = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        cmdSave = new javax.swing.JButton();
        cmdClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        attrTable = new javax.swing.JTable();

        AttrEditorPopUp.add(jSeparator2);

        mnuAttrEditor.setText("Attribute Editor");
        mnuAttrEditor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mnuAttrEditorMouseReleased(evt);
            }
        });
        AttrEditorPopUp.add(mnuAttrEditor);

        mnuShowDump.setText("Show Dump");
        mnuShowDump.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mnuShowDumpMouseReleased(evt);
            }
        });
        AttrEditorPopUp.add(mnuShowDump);

        mnuViewContent.setText("View Content");
        mnuViewContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewContentActionPerformed(evt);
            }
        });
        AttrEditorPopUp.add(mnuViewContent);
        AttrEditorPopUp.add(jSeparator1);

        mnuDestroy.setText("Delete Object");
        mnuDestroy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDestroyActionPerformed(evt);
            }
        });
        AttrEditorPopUp.add(mnuDestroy);

        jMenu1.setText("Add Value");

        mnuAppend.setText("Append Value");
        mnuAppend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendActionPerformed(evt);
            }
        });
        jMenu1.add(mnuAppend);

        mnuAddAfter.setText("Item");
        jMenu1.add(mnuAddAfter);

        mnuAddBefore.setText("Item");
        jMenu1.add(mnuAddBefore);

        AttrEditorPopUp.add(jMenu1);

        mnuAppendValue.setText("Append Value");
        mnuAppendValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendValueActionPerformed(evt);
            }
        });
        repeatingattradder.add(mnuAppendValue);

        mnuInsertBefore.setText("Insert Repeating (before)");
        mnuInsertBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInsertBeforeActionPerformed(evt);
            }
        });
        repeatingattradder.add(mnuInsertBefore);

        mnuInsertAfter.setText("Insert Repeating (after)");
        mnuInsertAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInsertAfterActionPerformed(evt);
            }
        });
        repeatingattradder.add(mnuInsertAfter);

        mnuRemoveRepeating.setText("Remove");
        mnuRemoveRepeating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRemoveRepeatingActionPerformed(evt);
            }
        });
        repeatingattradder.add(mnuRemoveRepeating);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmdSave.setMnemonic('s');
        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        cmdClose.setMnemonic('c');
        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, cmdSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, cmdClose, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(cmdSave)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdClose)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        attrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute Name", "Attribute Value"
            }
        ));
        attrTable.setCellSelectionEnabled(true);
        attrTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                attrTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(attrTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 376, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void mnuInsertBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInsertBeforeActionPerformed
        int row = attrTable.getSelectedRow();
        Vector<Object> v = (Vector) tablemodel.getDataVector().elementAt(row);
        String attrName = (String) v.elementAt(AttrEditorFrame.ATTRNAME_WITH_INDEX);
        String attName = (String) v.elementAt(AttrEditorFrame.ATTRNAME);
        Integer i = (Integer) v.elementAt(AttrEditorFrame.ATTRINDEX);
        int indexi = i.intValue();
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId l_ID = new DfId(strID);
            IDfSysObject l_obj = (IDfSysObject) session.getObject(l_ID);
            if (indexi == 0) {
                l_obj.insertString(attName, 0, "");
            } else {
                l_obj.insertString(attName, indexi, "");
            }
            changeVector.add(attName);
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session!=null)
                smanager.releaseSession(session);
        }
        this.updateTable();
    }//GEN-LAST:event_mnuInsertBeforeActionPerformed

    private void mnuInsertAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInsertAfterActionPerformed
        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);
        String attrName = (String) v.elementAt(AttrEditorFrame.ATTRNAME_WITH_INDEX);
        String attName = (String) v.elementAt(AttrEditorFrame.ATTRNAME);
        Integer i = (Integer) v.elementAt(AttrEditorFrame.ATTRINDEX);
        int indexi = i.intValue();
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId l_id = new DfId(strID);
            IDfSysObject l_obj = (IDfSysObject) session.getObject(l_id);
            l_obj.insertString(attName, indexi + 1, "");
            changeVector.add(attName);
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
        this.updateTable();
    }//GEN-LAST:event_mnuInsertAfterActionPerformed

    private void mnuAppendValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendValueActionPerformed

        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);
        String attrName = (String) v.elementAt(AttrEditorFrame.ATTRNAME_WITH_INDEX);
        String attName = (String) v.elementAt(AttrEditorFrame.ATTRNAME);
        Integer i = (Integer) v.elementAt(AttrEditorFrame.ATTRINDEX);
        int indexi = i.intValue();
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId lid = new DfId(strID);
            IDfSysObject lobj = (IDfSysObject) session.getObject(lid);
            lobj.appendString(attName, "");
            changeVector.add(attName);
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
        this.updateTable();
    }//GEN-LAST:event_mnuAppendValueActionPerformed

    private void mnuRemoveRepeatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRemoveRepeatingActionPerformed
        ////System.out.println("remove....");
        int row = attrTable.getSelectedRow();
        Vector<Object> v = (Vector) tablemodel.getDataVector().elementAt(row);
        String attrName = (String) v.elementAt(AttrEditorFrame.ATTRNAME_WITH_INDEX);
        String attName = (String) v.elementAt(AttrEditorFrame.ATTRNAME);
        Integer i = (Integer) v.elementAt(AttrEditorFrame.ATTRINDEX);
        int indexi = i.intValue();
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId lid = new DfId(strID);
            IDfSysObject lobj = (IDfSysObject) session.getObject(lid);
            lobj.remove(attName, indexi);
            changeVector.add(attName);
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
        this.updateTable();
    }//GEN-LAST:event_mnuRemoveRepeatingActionPerformed

    private void mnuAppendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendActionPerformed
        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);
        String attrName = (String) v.elementAt(0);
        String objid = (String) v.elementAt(1);
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId lid = new DfId(objid);
            IDfSysObject lobj = (IDfSysObject) session.getObject(lid);
            lobj.destroy();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }

        }
        
    }//GEN-LAST:event_mnuAppendActionPerformed

    private void mnuViewContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewContentActionPerformed
        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);
        IDfSession session = null;
        String objid = (String) v.elementAt(1);
        try {
            session = smanager.getSession();
            IDfId lid = new DfId(objid);
            IDfSysObject lobj = (IDfSysObject) session.getObject(lid);
            String filePath = lobj.getFile(null);
            File fileToOpen = new File(filePath);
            try {
                Desktop.getDesktop().open(fileToOpen);
            } catch (IOException ex) {
                log.error(ex);
            }
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session!=null)
                smanager.releaseSession(session);
        }
        
    }//GEN-LAST:event_mnuViewContentActionPerformed

    private void mnuShowDumpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuShowDumpMouseReleased
        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);

        String objid = (String) v.elementAt(1);
        IDfId lid = new DfId(objid);
        DumpFrame dumpframe = new DumpFrame();  
        dumpframe.setstrID(objid);
        dumpframe.setId(lid);

            dumpframe.initData();
            SwingHelper.centerJFrame(dumpframe);
            dumpframe.setVisible(true);

        
    }//GEN-LAST:event_mnuShowDumpMouseReleased

    private void mnuAttrEditorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuAttrEditorMouseReleased
        ////System.out.println("release");
        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);

        String objid = (String) v.elementAt(1);
        IDfId lid = new DfId(objid);/*
        AttrEditorFrame attredit = new AttrEditorFrame();
        attredit.setstrID(objid);
        attredit.setId(lid);
        attredit.initDisplay();
//            dumpframe.initData();
        attredit.setVisible(true);*/
    }//GEN-LAST:event_mnuAttrEditorMouseReleased

    private void mnuDestroyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDestroyActionPerformed

        int row = attrTable.getSelectedRow();
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);

        String objid = (String) v.elementAt(1);
        IDfSession session = null;
        try {
            session = smanager.getSession();
            IDfId lid = new DfId(objid);
            IDfSysObject obj2 = (IDfSysObject) session.getObject(lid);
            obj2.destroy();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (session!=null) {
                smanager.releaseSession(session);
            }
        }
        
    }//GEN-LAST:event_mnuDestroyActionPerformed

    private void attrTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attrTableMouseReleased
        int butt = evt.getButton();
        ////System.out.println("butt on: " + butt);
        if (butt == MouseEvent.BUTTON3) {
            int row = attrTable.getSelectedRow();
            Vector x = (Vector) tablemodel.getDataVector().elementAt(row);
            Integer type = (Integer) x.elementAt(2);
            if (type.intValue() == 3) {
                AttrEditorPopUp.show(evt.getComponent(), evt.getX(), evt.getY());
            } else {
                repeatingattradder.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
        
    }//GEN-LAST:event_attrTableMouseReleased

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
// TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed

        //    attrTable.getDefaultEditor(String.class).stopCellEditing();

        ////System.out.println("changeVector: " + changeVector);
        try {
            ////System.out.println("changeVector: " + changeVector);
            Iterator changeIterator = changeVector.iterator();
            while (changeIterator.hasNext()) {
                String changedAttr = (String) changeIterator.next();
                for (int i = 0; i < tablemodel.getRowCount(); i++) {
                    String attrval = (String) tablemodel.getValueAt(i, 0);
                    if (attrval.equals(changedAttr)) {
                        ////System.out.println("changed attribute:" + changedAttr);
                        ////System.out.println("new value: " + tablemodel.getValueAt(i, 1));
                        obj.setString(changedAttr, (String) tablemodel.getValueAt(i, 1));
                    }
                }
            }
            obj.save();
        } catch (DfException ex) {
            log.error(ex);
        }

        changeVector.clear();
        initDisplay();
    }//GEN-LAST:event_cmdSaveActionPerformed

    public void updateTable() {


        ////System.out.println(id);
        ////System.out.println(strID);
        tablemodel.removeTableModelListener(getA());
        this.tablemodel.setRowCount(0);

        IDfCollection col = null;
IDfSession session = null;
        try {
            session = smanager.getSession();
            ////System.out.println("id is: " + id);
            obj = session.getObject(id);
            Vector<Object> stupidVector = new Vector<Object>();
            stupidVector.add("r_object_id");
            stupidVector.add(strID);
            stupidVector.add(3);
            stupidVector.add(0);
            stupidVector.add("r_object_id");
            stupidVector.add("false");
            tablemodel.addRow(stupidVector);
            String objectType = obj.getString("r_object_type");
//            IDfType tyyppi = session.getType(objectType);
            IDfQuery query = new DfQuery();
            query.setDQL("select attr_name, attr_repeating, attr_type from dm_type where name = '" + objectType + "' order by 1");
            col = query.execute(session, DfQuery.DF_READ_QUERY);
//            int attrcount = obj.getAttrCount();
//            for (int i = 0 ; i<attrcount ; i++) {
            while (col.next()) {
                String attrName = col.getString("attr_name");
                boolean isrepeating = col.getBoolean("attr_repeating");
                int attrType = col.getInt("attr_type");

                if (isrepeating) {
                    int cunt = obj.getValueCount(attrName);
                    boolean flag = true;
                    for (int j = 0; j < cunt; j++) {
                        Vector<Object> v = new Vector<Object>();
                        String attrValue = obj.getRepeatingString(attrName, j);
                        v.add(attrName + "[" + j + "]");
                        v.add(attrValue);
                        v.add(attrType);
                        Integer nInt = new Integer(j);
                        v.add(nInt);
                        v.add(attrName);
                        v.add("true");
                        tablemodel.addRow(v);

                        flag = false;
                    }
                    if (flag) {
                        Vector<Object> v = new Vector<Object>();
                        String attrValue = " ";
                        v.add(attrName + "[0]");
                        v.add(attrValue);
                        v.add(attrType);
                        Integer nInt2 = new Integer(0);
                        v.add(nInt2);
                        v.add(attrName);
                        v.add("true");
                        tablemodel.addRow(v);
                    }
                } else {
                    Vector<Object> v = new Vector<Object>();
                    String attrValue = obj.getString(attrName);
                    v.add(attrName);
                    v.add(attrValue);
                    v.add(attrType);
                    Integer nInt = new Integer(0);
                    v.add(nInt);
                    v.add(attrName);
                    v.add("false");
                    tablemodel.addRow(v);
                }
            }

            attrTable.validate();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    log.error(ex);
                }
            }
            if (session!=null)
                smanager.releaseSession(session);
        }
    }

    public void initDisplay() {

        
        ////System.out.println(id);
        ////System.out.println(strID);
        IDfCollection col = null;
        IDfSession session = null;
        try {
            session = smanager.getSession();
            ////System.out.println("id is: " + id);
            obj = session.getObject(id);
            Vector<Object> stupidVector = new Vector<Object>();
            stupidVector.add("r_object_id");
            stupidVector.add(strID);
            stupidVector.add(3);
            stupidVector.add(0);
            stupidVector.add("r_object_id");
            stupidVector.add("false");
            tablemodel.addRow(stupidVector);
            String objectType = obj.getString("r_object_type");
//            IDfType tyyppi = session.getType(objectType);
            IDfQuery query = new DfQuery();
            query.setDQL("select attr_name, attr_repeating, attr_type from dm_type where name = '" + objectType + "' order by 1");
            col = query.execute(session, DfQuery.DF_READ_QUERY);
//            int attrcount = obj.getAttrCount();
//            for (int i = 0 ; i<attrcount ; i++) {
            while (col.next()) {
                String attrName = col.getString("attr_name");
                boolean isrepeating = col.getBoolean("attr_repeating");
                int attrType = col.getInt("attr_type");

                if (isrepeating) {
                    int cunt = obj.getValueCount(attrName);
                    boolean flag = true;
                    for (int j = 0; j < cunt; j++) {
                        Vector<Object> v = new Vector<Object>();
                        String attrValue = obj.getRepeatingString(attrName, j);
                        v.add(attrName + "[" + j + "]");
                        v.add(attrValue);
                        v.add(attrType);
                        Integer nInt = new Integer(j);
                        v.add(nInt);
                        v.add(attrName);
                        v.add("true");
                        tablemodel.addRow(v);

                        flag = false;
                    }
                    if (flag) {
                        Vector<Object> v = new Vector<Object>();
                        String attrValue = " ";
                        v.add(attrName + "[0]");
                        v.add(attrValue);
                        v.add(attrType);
                        Integer nInt2 = new Integer(0);
                        v.add(nInt2);
                        v.add(attrName);
                        v.add("true");
                        tablemodel.addRow(v);
                    }
                } else {
                    Vector<Object> v = new Vector<Object>();
                    String attrValue = obj.getString(attrName);
                    v.add(attrName);
                    v.add(attrValue);
                    v.add(attrType);
                    Integer nInt = new Integer(0);
                    v.add(nInt);
                    v.add(attrName);
                    v.add("false");
                    tablemodel.addRow(v);
                }
            }

            attrTable.validate();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    log.error(ex);
                }
            }
            smanager.releaseSession(session);
        }
        this.setTitle("Attributes of object " + this.id.toString());

        tablemodel.addTableModelListener(a);
    }
    private static int ATTRNAME_WITH_INDEX = 0;
    private static int ATTRVALUE = 1;
    private static int ATTRTYPE = 2;
    private static int ATTRINDEX = 3;
    private static int ATTRNAME = 4;
    private static int ISREPEATING = 5;
    private IDfPersistentObject obj;
    private IDfId id;
    private Vector<Object> changeVector;
    private String strID;
    private DefaultTableModel tablemodel;
/*
    public void setstrID(String strid) {
        this.strID = strid;
    }
 */
    private TableModelListener a;
/*
    public void setId(IDfId id) {
        this.id = id;
    }
*/
    public TableModelListener getA() {
        return a;
    }

    public void setA(TableModelListener a) {
        this.a = a;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu AttrEditorPopUp;
    private javax.swing.JTable attrTable;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdSave;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem mnuAddAfter;
    private javax.swing.JMenuItem mnuAddBefore;
    private javax.swing.JMenuItem mnuAppend;
    private javax.swing.JMenuItem mnuAppendValue;
    private javax.swing.JMenuItem mnuAttrEditor;
    private javax.swing.JMenuItem mnuDestroy;
    private javax.swing.JMenuItem mnuInsertAfter;
    private javax.swing.JMenuItem mnuInsertBefore;
    private javax.swing.JMenuItem mnuRemoveRepeating;
    private javax.swing.JMenuItem mnuShowDump;
    private javax.swing.JMenuItem mnuViewContent;
    private javax.swing.JPopupMenu repeatingattradder;
    // End of variables declaration//GEN-END:variables
}
