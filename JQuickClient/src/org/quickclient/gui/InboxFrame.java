/*
 * InboxFrame.java
 *
 * Created on 29. toukokuuta 2008, 0:04
 */
package org.quickclient.gui;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.QueueItemData;
import org.quickclient.classes.SwingHelper;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfPackage;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfQueueItem;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.client.IDfWorkitem;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.IDfId;


/**
 * 
 * @author Administrator
 */
public class InboxFrame extends javax.swing.JInternalFrame {

	DocuSessionManager smanager;
	DefaultTableModel inboxModel;
	Logger logger = Logger.getLogger(SessionsFrame.class);
	private FormatRenderer formatrenderer;
	Logger log = Logger.getLogger(InboxFrame.class);

	/** Creates new form InboxFrame */
	public InboxFrame() {
		initComponents();
		this.jScrollPane1.getViewport().setBackground(Color.WHITE);
		formatrenderer = new FormatRenderer();
		smanager = DocuSessionManager.getInstance();
		initializeColumns();
		inboxTable.setModel(inboxModel);
		updateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		inboxPopUp = new javax.swing.JPopupMenu();
		mnuViewAttachment = new javax.swing.JMenuItem();
		mnuOpenItem = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		mnuDelete = new javax.swing.JMenuItem();
		jToolBar1 = new javax.swing.JToolBar();
		jLabel1 = new javax.swing.JLabel();
		cmbItemType = new javax.swing.JComboBox();
		jButton1 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		inboxTable = new javax.swing.JTable();
		jPanel1 = new javax.swing.JPanel();
		lblInboxInfo = new javax.swing.JLabel();

		mnuViewAttachment.setText("View Attachment");
		mnuViewAttachment.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mnuViewAttachmentActionPerformed(evt);
			}
		});
		inboxPopUp.add(mnuViewAttachment);

		mnuOpenItem.setText("Open Item");
		mnuOpenItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mnuOpenItemActionPerformed(evt);
			}
		});
		inboxPopUp.add(mnuOpenItem);
		inboxPopUp.add(jSeparator1);

		mnuDelete.setText("Delete");
		mnuDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mnuDeleteActionPerformed(evt);
			}
		});
		inboxPopUp.add(mnuDelete);

		setClosable(true);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		setTitle("Inbox");

		jToolBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		jToolBar1.setFloatable(false);
		jToolBar1.setRollover(true);

		jLabel1.setText("  View: ");
		jToolBar1.add(jLabel1);

		cmbItemType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tasks & Notifications", "Tasks", "Notifications" }));
		cmbItemType.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
			public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
				cmbItemTypeMouseWheelMoved(evt);
			}
		});
		cmbItemType.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				cmbItemTypeItemStateChanged(evt);
			}
		});
		jToolBar1.add(cmbItemType);

		jButton1.setFont(new java.awt.Font("Tahoma", 1, 11));
		jButton1.setText("  Refresh  ");
		jButton1.setToolTipText("Reloads inbox items");
		jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		jButton1.setFocusable(false);
		jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		jToolBar1.add(jButton1);

		inboxTable.setAutoCreateRowSorter(true);
		inboxTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null }, { null }, { null }, { null } }, new String[] { "Title 1" }));
		inboxTable.setCellSelectionEnabled(true);
		inboxTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		inboxTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				inboxTableMousePressed(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				inboxTableMouseReleased(evt);
			}
		});
		jScrollPane1.setViewportView(inboxTable);

		jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		lblInboxInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		lblInboxInfo.setText("n items.");
		lblInboxInfo.setAlignmentY(0.0F);
		jPanel1.add(lblInboxInfo);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
				.addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void inboxTableMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_inboxTableMouseReleased

		int butt = evt.getButton();
		if (butt == MouseEvent.BUTTON3) {
			inboxPopUp.show(evt.getComponent(), evt.getX(), evt.getY());
		}
	}// GEN-LAST:event_inboxTableMouseReleased

	private void mnuDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mnuDeleteActionPerformed

		Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
		setCursor(cur);
		Vector idlist = getIDListfromTable();
		IDfSession session = null;
		try {
			session = smanager.getSession();
			for (int i = 0; i < idlist.size(); i++) {
				String id = (String) idlist.get(i);
				IDfQueueItem qi = (IDfQueueItem) session.getObject(new DfId(id));
				qi.destroy();
			}

		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);

		} finally {
			if (session != null) {
				smanager.releaseSession(session);
			}
			Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
			setCursor(cur2);
		}
		updateTable();
	}// GEN-LAST:event_mnuDeleteActionPerformed

	private void mnuViewAttachmentActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mnuViewAttachmentActionPerformed
		IDfSession session = null;
		String strId = getAttachmentIDfromTable();
		IDfSysObject obj = null;
		IDfWorkitem workitem = null;
		IDfCollection col = null;
		try {
			Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
			setCursor(cur);
			IDfId id = new DfId(strId);
			session = smanager.getSession();
			if (strId.startsWith("4a")) {
				workitem = (IDfWorkitem) session.getObject(id);
				col = workitem.getPackages("");
				while (col.next()) {
					String pid = col.getString("r_object_id");
					IDfPackage packagex = (IDfPackage) session.getObject(new DfId(pid));
					int cunt = packagex.getComponentIdCount();
					for (int i = 0; i < cunt; i++) {
						IDfId attid = packagex.getComponentId(i);
						obj = (IDfSysObject) session.getObject(attid);
						String filePath = obj.getFile(null);
						File fileToOpen = new File(filePath);
						try {
							Desktop.getDesktop().open(fileToOpen);
						} catch (IOException ex) {
							log.error(ex);
							JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
						}
					}
				}
			} else {
				obj = (IDfSysObject) session.getObject(id);
				String filePath = obj.getFile(null);
				File fileToOpen = new File(filePath);
				try {
					Desktop.getDesktop().open(fileToOpen);
				} catch (IOException ex) {
					log.error(ex);
					JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
				}
			}

		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
		} finally {
			if (session != null) {
				smanager.releaseSession(session);
			}
			Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
			setCursor(cur2);
		}
	}// GEN-LAST:event_mnuViewAttachmentActionPerformed

	private void mnuOpenItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mnuOpenItemActionPerformed

		String itemid = getIDfromTable();
		IDfSession session = null;
		try {
			session = smanager.getSession();
			IDfQueueItem qitem = (IDfQueueItem) session.getObject(new DfId(itemid));

			if (qitem.getItemType().equals("manual")) {
				InboxItemForm iiform = new InboxItemForm(itemid);
				SwingHelper.centerJFrame(iiform);
				iiform.setVisible(true);
			} else {

				InboxNotification notifFrame = new InboxNotification();
				notifFrame.setId(itemid);
				notifFrame.init();
				SwingHelper.centerJFrame(notifFrame);
				notifFrame.setVisible(true);
			}

		} catch (DfException ex) {
			log.error(ex);
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
		} finally {
			if (session != null)
				smanager.releaseSession(session);
		}
	}// GEN-LAST:event_mnuOpenItemActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		updateTable();
	}// GEN-LAST:event_jButton1ActionPerformed

	private void inboxTableMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_inboxTableMousePressed
		/*
		 * Point p = evt.getPoint(); int row = inboxTable.rowAtPoint(p);
		 * ListSelectionModel selectionModel = inboxTable.getSelectionModel();
		 * selectionModel.setSelectionInterval(row, row);/*
		 */
	}// GEN-LAST:event_inboxTableMousePressed

	private void cmbItemTypeMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {// GEN-FIRST:event_cmbItemTypeMouseWheelMoved

		int maxindex = cmbItemType.getItemCount();
		if (evt.getWheelRotation() > 0) {
			int index = cmbItemType.getSelectedIndex();
			if (index < maxindex - 1) {
				cmbItemType.setSelectedIndex(index + 1);
			}
		} else {
			int index = cmbItemType.getSelectedIndex();
			if (index > 0) {
				cmbItemType.setSelectedIndex(index - 1);
			}
		}

	}// GEN-LAST:event_cmbItemTypeMouseWheelMoved

	private void cmbItemTypeItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_cmbItemTypeItemStateChanged
		System.out.println("statechange");
		updateTable();
	}// GEN-LAST:event_cmbItemTypeItemStateChanged
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JComboBox cmbItemType;
	private javax.swing.JPopupMenu inboxPopUp;
	private javax.swing.JTable inboxTable;
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JLabel lblInboxInfo;
	private javax.swing.JMenuItem mnuDelete;
	private javax.swing.JMenuItem mnuOpenItem;
	private javax.swing.JMenuItem mnuViewAttachment;

	// End of variables declaration//GEN-END:variables

	private void updateTable() {
		IDfSession session = null;
		IDfCollection col = null;
		session = smanager.getSession();
		if (session == null)
			return;
		inboxModel.setRowCount(0);
		String selectedItem = (String) cmbItemType.getSelectedItem();
		System.out.println(selectedItem);
		try {
			Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
			setCursor(cur);
			String username = session.getLoginUserName();
			String querys = "SELECT content_type,date_sent,dependency_type,due_date,event,item_id,item_name,item_type,priority,r_object_id,router_id,sent_by,task_name,task_subject,task_number,task_state,source_docbase,source_event,message FROM dmi_queue_item WHERE ( name IN ('" + username
					+ "') ) AND delete_flag=0  ORDER BY 2 DESC";
			IDfQuery query = new DfQuery();
			query.setDQL(querys);
			col = query.execute(session, DfQuery.DF_QUERY);
			while (col.next()) {
				Vector joo = new Vector();

				String itemType = col.getString("item_type");
				if (itemType.equals("manual")) {
					if (!selectedItem.equals("Notifications")) {
						joo.add(col.getString("priority"));
						joo.add(col.getString("content_type") + ",dm_task");
						joo.add(col.getString("task_name"));
						joo.add(col.getString("sent_by"));
						joo.add(col.getString("date_sent"));
						joo.add(col.getString("item_name"));
						QueueItemData qiData = new QueueItemData();
						qiData.setAttachmentId(col.getString("item_id"));
						qiData.setRObjectId(col.getString("r_object_id"));
						joo.add(qiData);
						inboxModel.addRow(joo);
					}
				} else {
					if (!selectedItem.equals("Tasks")) {
						String contentType = col.getString("content_type");
						if (contentType.length() > 0) {
							joo.add(col.getString("priority"));
							joo.add(col.getString("content_type") + "," + col.getString("item_type"));
							joo.add(col.getString("item_name"));
							joo.add(col.getString("sent_by"));
							joo.add(col.getString("date_sent"));
							joo.add(col.getString("message"));
							QueueItemData qiData = new QueueItemData();
							qiData.setAttachmentId(col.getString("item_id"));
							qiData.setRObjectId(col.getString("r_object_id"));
							joo.add(qiData);
							inboxModel.addRow(joo);
						} else {
							joo.add(col.getString("priority"));
							joo.add(col.getString("content_type") + ",notification");
							joo.add(col.getString("message"));
							joo.add(col.getString("sent_by"));
							joo.add(col.getString("date_sent"));
							joo.add(" ");
							QueueItemData qiData = new QueueItemData();
							qiData.setAttachmentId(col.getString("item_id"));
							qiData.setRObjectId(col.getString("r_object_id"));
							joo.add(qiData);
							inboxModel.addRow(joo);

						}
					}
				}
			}
			inboxTable.setModel(inboxModel);
			inboxTable.validate();
			this.lblInboxInfo.setText(inboxModel.getRowCount() + " items.");
		} catch (DfException ex) {
			log.error(ex);
		} finally {
			if (col != null) {
				try {
					col.close();
				} catch (DfException ex) {
					log.error(ex);
				}
			}
			if (session != null) {
				smanager.releaseSession(session);
			}
			Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
			setCursor(cur2);
		}
	}

	public void initializeColumns() {
		inboxTable.setAutoCreateColumnsFromModel(true);
		inboxModel = new DefaultTableModel() {

			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};
		inboxModel.setColumnCount(0);
		inboxModel.addColumn(".");
		inboxModel.addColumn(".");

		// default column values
		inboxModel.addColumn("Name");
		inboxModel.addColumn("Sent By");
		inboxModel.addColumn("Date Sent");
		inboxModel.addColumn("Status");
		inboxModel.addColumn("data");
		inboxTable.setModel(inboxModel);
		inboxTable.setRowHeight(22);
		inboxTable.getColumnModel().getColumn(1).setCellRenderer(formatrenderer);
		inboxTable.getColumnModel().getColumn(0).setCellRenderer(new PriorityRenderer());
		// objectTable.getColumnModel().getColumn(1).setCellRenderer(formatrenderer);
		inboxTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		inboxTable.setEditingRow(1);

		for (int i = 0; i < 3; i++) {
			TableColumn col = inboxTable.getColumnModel().getColumn(i);
			if (i == 0 || i == 1) {
				col.setPreferredWidth(22);
				col.setMaxWidth(22);
			} else {
				col.setPreferredWidth(200);
			}
		}

		int lastIndex = inboxTable.getColumnCount();
		inboxTable.getColumnModel().removeColumn(inboxTable.getColumnModel().getColumn(lastIndex - 1));

	}

	public Vector getIDListfromTable() {
		int[] row = inboxTable.getSelectedRows();
		Vector idVector = new Vector();
		for (int i = 0; i < row.length; i++) {
			DefaultTableModel model = (DefaultTableModel) inboxTable.getModel();
			Vector v = (Vector) model.getDataVector().elementAt(row[i]);
			QueueItemData qidata = (QueueItemData) v.lastElement();
			String objid = qidata.getRObjectId();
			idVector.add(objid);
		}
		return idVector;
	}

	public Vector getAttachmentIDListfromTable() {
		int[] row = inboxTable.getSelectedRows();
		Vector idVector = new Vector();
		for (int i = 0; i < row.length; i++) {
			DefaultTableModel model = (DefaultTableModel) inboxTable.getModel();
			Vector v = (Vector) model.getDataVector().elementAt(row[i]);
			QueueItemData qidata = (QueueItemData) v.lastElement();
			String objid = qidata.getAttachmentId();
			idVector.add(objid);
		}
		return idVector;
	}

	public String getIDfromTable() {
		int row = inboxTable.getSelectedRow();
		Vector v = (Vector) inboxModel.getDataVector().elementAt(row);
		QueueItemData qidata = (QueueItemData) v.lastElement();
		return qidata.getRObjectId();
	}

	public String getAttachmentIDfromTable() {
		int row = inboxTable.getSelectedRow();
		Vector v = (Vector) inboxModel.getDataVector().elementAt(row);
		QueueItemData qidata = (QueueItemData) v.lastElement();
		return qidata.getAttachmentId();
	}
}
