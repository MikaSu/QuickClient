/*
 * NewDocumentFrame.java
 *
 * Created on 13. toukokuuta 2008, 22:23
 */
package org.quickclient.gui;

import java.awt.Cursor;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.apache.log4j.Logger;
import org.quickclient.classes.ConfigService;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.DokuData;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfId;
import com.documentum.fc.common.DfLogger;
import com.documentum.fc.common.IDfId;


/**
 *
 * @author  Administrator
 */
public class NewDocumentFrame extends javax.swing.JFrame implements TreeSelectionListener {

    private String folderId;
    private DocuSessionManager smanager;
    private QuickClientMutableTreeNode root;
    private QuickClientMutableTreeNode templates;
    private DefaultTreeModel treemodel;
    private DefaultTableModel tablemodel;
    private FormatRenderer formatrenderer;
    private boolean loading;
    private String selectedType;
    private String selectedFormat;
    private boolean showAll = false;
    Logger log = Logger.getLogger(NewDocumentFrame.class);

    /** Creates new form NewDocumentFrame */
    public NewDocumentFrame(String folderId) {
        initComponents();
        this.folderId = folderId;
        smanager = DocuSessionManager.getInstance();
        formatrenderer = new FormatRenderer();
        initializeColumns();
        initIcons();
        initCombo();
        initTree();
    }

    private void initCombo() {
        loading = true;
        IDfCollection col = null;
        IDfCollection col2 = null;
        IDfSession session = null;
        try {
            Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
            setCursor(cur);
            session = smanager.getSession();
            IDfQuery query = new DfQuery();
            IDfQuery query2 = new DfQuery();
            query.setDQL("select distinct r_type_name from dmi_type_info where any r_supertype = 'dm_document' order by r_type_name");
            query2.setDQL("select name from dm_format order by name");

            col = query.execute(session, DfQuery.DF_READ_QUERY);
            col2 = query2.execute(session, DfQuery.DF_READ_QUERY);

            while (col.next()) {
                cmbType.addItem(col.getString("r_type_name"));
            }

            while (col2.next()) {
                cmbFormat.addItem(col2.getString("name"));
            }
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            try {
                if (col != null) {
                    col.close();
                }
            } catch (DfException ex) {
                log.error(ex);
            }
            try {
                if (col2 != null) {
                    col2.close();
                }
            } catch (DfException ex) {
                log.error(ex);
            }
            if (session != null) {
                smanager.releaseSession(session);
            }
            Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
            setCursor(cur2);
        }
        ConfigService cs = ConfigService.getInstance();
        String importFormat = cs.getParameter(ConfigService.DEFAULT_IMPORT_FORMAT);
        if (importFormat.length() > 0) {
            cmbFormat.setSelectedItem(importFormat);
        } else {
            cmbFormat.setSelectedItem("msw8");
            selectedFormat = "msw8";

        }
        String importType = cs.getParameter(ConfigService.DEFAULT_IMPORT_TYPE);;
        if (importType.length() > 0) {
            cmbType.setSelectedItem(importType);
            selectedType = importType;
        } else {
            cmbType.setSelectedItem("dm_document");
            selectedType = "dm_document";
        }
        loading = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdCreateFromTemplate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cmbType = new javax.swing.JComboBox();
        cmbFormat = new javax.swing.JComboBox();
        chkShowAll = new javax.swing.JCheckBox();
        chkFromTemplate = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        templateTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        folderTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmdCreateFromTemplate.setText("Create");
        cmdCreateFromTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCreateFromTemplateActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Name:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 40, 20));

        jLabel2.setText("Type:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 40, 20));

        jLabel3.setText("Format:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 40, 20));
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 310, -1));

        cmbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTypeItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbType, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 310, -1));

        cmbFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFormatItemStateChanged(evt);
            }
        });
        cmbFormat.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                cmbFormatCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jPanel1.add(cmbFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 310, -1));

        chkShowAll.setText("Show All Templates");
        chkShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowAllActionPerformed(evt);
            }
        });
        jPanel1.add(chkShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 160, -1));

        chkFromTemplate.setSelected(true);
        chkFromTemplate.setText("Create from Template");
        chkFromTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFromTemplateActionPerformed(evt);
            }
        });
        jPanel1.add(chkFromTemplate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 150, -1));

        jSplitPane2.setTopComponent(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Template Browser"));

        jSplitPane1.setDividerLocation(200);

        templateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(templateTable);

        jSplitPane1.setRightComponent(jScrollPane1);

        folderTree.setRootVisible(false);
        folderTree.setShowsRootHandles(true);
        folderTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                folderTreeTreeExpanded(evt);
            }
        });
        jScrollPane2.setViewportView(folderTree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 667, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdCreateFromTemplate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCreateFromTemplate)
                    .addComponent(jButton2))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cmbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTypeItemStateChanged
    if (!loading) {
        selectedType = (String) cmbType.getSelectedItem();
        updateTable();
        int row = templateTable.getSelectedRow();
        if (row == -1) {
            if (templateTable.getRowCount() > 0) {
                templateTable.setRowSelectionInterval(0, 0);
            }
        }
    }
}//GEN-LAST:event_cmbTypeItemStateChanged

private void cmbFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFormatItemStateChanged
    if (!loading) {
        selectedFormat = (String) cmbFormat.getSelectedItem();
        updateTable();
        int row = templateTable.getSelectedRow();
        if (row == -1) {
            if (templateTable.getRowCount() > 0) {
                templateTable.setRowSelectionInterval(0, 0);
            }
        }
    }
}//GEN-LAST:event_cmbFormatItemStateChanged

private void folderTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_folderTreeTreeExpanded
    Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
    setCursor(cur);
    TreePath path = evt.getPath();
    QuickClientMutableTreeNode currNode = (QuickClientMutableTreeNode) path.getLastPathComponent();
    Vector<QuickClientMutableTreeNode> myVector = new Vector<QuickClientMutableTreeNode>();
    int ccount = currNode.getChildCount();
    for (int i = 0; i < ccount; i++) {
        myVector.add((QuickClientMutableTreeNode) currNode.getChildAt(i));
    }
    // QuickClientMutableTreeNode currNode2 = (QuickClientMutableTreeNode) currNode.getLastLeaf();

    String objID = currNode.getDokuDataID();
    IDfSession session = null;
    IDfCollection col = null;

    try {
        session = smanager.getSession();
        IDfQuery query = new DfQuery();
        query.setDQL("select r_object_id, object_name,r_link_cnt from dm_folder where any i_folder_id = '" + objID + "' order by object_name desc");
        col = query.execute(session, IDfQuery.DF_READ_QUERY);
        while (col.next()) {
            String newID = col.getString("r_object_id");
            String objName = col.getString("object_name");
            int rLinkCnt = col.getInt("r_link_cnt");
            QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(objName);
            DokuData data = new DokuData(newID);
            newNode.setDokuData(data);
            treemodel.insertNodeInto(newNode, currNode, 0);
            if (rLinkCnt > 0) {
                QuickClientMutableTreeNode tempNode = new QuickClientMutableTreeNode(objName + "W");
                treemodel.insertNodeInto(tempNode, newNode, 0);
            }
        }
    } catch (DfException ex) {
        log.error(ex);
        JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (col != null) {
            try {
                col.close();
            } catch (DfException ex) {
            }
        }
        if (session != null) {
            smanager.releaseSession(session);
        }
    }


    Iterator i = myVector.iterator();
    while (i.hasNext()) {
        QuickClientMutableTreeNode a = (QuickClientMutableTreeNode) i.next();
        treemodel.removeNodeFromParent(a);
    }
    //treemodel.removeNodeFromParent(currNode2);
    folderTree.validate();
    Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
    setCursor(cur2);
}//GEN-LAST:event_folderTreeTreeExpanded

private void chkShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowAllActionPerformed
// TODO add your handling code here:
    if (chkShowAll.isSelected()) {
        showAll = true;
        cmbFormat.setEnabled(false);
        cmbType.setEnabled(false);
        this.valueChanged(null);
    } else {
        showAll = false;
        cmbFormat.setEnabled(true);
        cmbType.setEnabled(true);
        this.valueChanged(null);

    }
}//GEN-LAST:event_chkShowAllActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    this.dispose();
}//GEN-LAST:event_jButton2ActionPerformed
    public String getIDfromTable() {


        int row = templateTable.getSelectedRow();
        if (row == -1) {
            row = 0;
        }
        Vector v = (Vector) tablemodel.getDataVector().elementAt(row);
        DokuData d = (DokuData) v.lastElement();
        String objid = d.getObjID();
        return objid;
    }

private void cmdCreateFromTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCreateFromTemplateActionPerformed

    IDfSession session = null;
    String newName = txtName.getText();
    if (newName.length() > 0) {
        session = smanager.getSession();

        try {
            if (chkFromTemplate.isSelected()) {
                if (templateTable.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "No template found!", "Error occured!", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    String objid = getIDfromTable();
                    IDfSysObject templateObj = (IDfSysObject) session.getObject(new DfId(objid));
                    IDfId newid = templateObj.saveAsNew(false);
                    IDfSysObject newObj = (IDfSysObject) session.getObject(newid);
                    newObj.mark("_NEW_");
                    newObj.setObjectName(newName);
                    newObj.link(folderId);
                    newObj.save();
                }
            } else {
                String type = (String) cmbType.getSelectedItem();
                String format = (String) cmbFormat.getSelectedItem();
                IDfSysObject newObj = (IDfSysObject) session.newObject(type);
                newObj.mark("_NEW_");
                newObj.setObjectName(newName);
                newObj.link(folderId);
                newObj.setContentType(format);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();

                newObj.setContent(baos);
                newObj.save();
            }
            /*
             */
            this.dispose();
        } catch (DfException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.INFORMATION_MESSAGE);
            log.error(ex);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please enter name..", "Error occured!", JOptionPane.INFORMATION_MESSAGE);

    }
/*    
# [ 3084 ] Sun May 18 09:45:14 2008 796000 ( 0.000 sec) ( 185 rpc) API> saveasnew,s1,0900014d80000537,F,T,F
# [ 3084 ] Sun May 18 09:45:15 2008 265000 ( 0.469 sec) ( 207 rpc) Res: '0900014d800322c0'
# [ 3084 ] Sun May 18 09:45:15 2008 265000 ( 0.000 sec) ( 208 rpc) API> revert,s1,0900014d80000537
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) API> get,s1,0900014d800322c0,_type_name
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) API> set,s1,0900014d800322c0,object_name
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) SET> paskaa
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) Res: 'OK'
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) API> set,s1,0900014d800322c0,a_full_text
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) SET> F
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) Res: 'OK'
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) API> mark,s1,0900014d800322c0,_NEW_
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) Res: 'OK'
# [ 3084 ] Sun May 18 09:45:15 2008 281000 ( 0.000 sec) ( 210 rpc) API> save,s1,0900014d800322c0

 */
}//GEN-LAST:event_cmdCreateFromTemplateActionPerformed

private void cmbFormatCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cmbFormatCaretPositionChanged
//  add your handling code here:
}//GEN-LAST:event_cmbFormatCaretPositionChanged

private void chkFromTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFromTemplateActionPerformed
//  add your handling code here:

    
}//GEN-LAST:event_chkFromTemplateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkFromTemplate;
    private javax.swing.JCheckBox chkShowAll;
    private javax.swing.JComboBox cmbFormat;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JButton cmdCreateFromTemplate;
    private javax.swing.JTree folderTree;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable templateTable;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
    private void initIcons() {
        java.net.URL imageURL = null;
        java.net.URL imageURL2 = null;
        java.net.URL imageURL3 = null;
        Icon leafIcon = null;
        Icon openIcon = null;
        Icon closedIcon = null;
        imageURL = FormatRenderer.class.getResource("fclosed256.gif");
        imageURL2 = FormatRenderer.class.getResource("fopen256.gif");
        imageURL3 = FormatRenderer.class.getResource("fclosed256.gif");
        if (imageURL != null) {
            leafIcon = new ImageIcon(imageURL);
        }
        if (imageURL2 != null) {
            openIcon = new ImageIcon(imageURL2);
        }
        if (imageURL3 != null) {
            closedIcon = new ImageIcon(imageURL3);
        }


        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setOpenIcon(openIcon);
            renderer.setClosedIcon(closedIcon);
            folderTree.setCellRenderer(renderer);
        }
    }
    // End of variables declaration
    private void updateTable() {
        //tablemodel = new DefaultTableModel();
        tablemodel.setRowCount(0);
//        tablemodel.addColumn("Old Name");
//        tablemodel.addColumn("New Name");
        IDfQuery templatequery = new DfQuery();
        String dql = "select r_object_id, a_content_type, r_object_type, object_name from " + selectedType + " where folder('/Templates') and a_content_type = '" + selectedFormat + "'";
        templatequery.setDQL(dql);
        IDfCollection col = null;
        IDfSession session = null;
        try {
            session = smanager.getSession();

            col = templatequery.execute(session, DfQuery.DF_READ_QUERY);
            while (col.next()) {
                Vector<Object> vector = new Vector<Object>();
                vector.add(col.getString("a_content_type") + "," + col.getString("r_object_type"));
                vector.add(col.getString("object_name"));
                //System.out.println(col.getString("object_name"));
                DokuData data = new DokuData(col.getString("r_object_id"));
                vector.add(data);
                tablemodel.addRow(vector);
            }
            templateTable.setModel(tablemodel);
            templateTable.validate();

        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col!=null) {
            	try {
					col.close();
				} catch (DfException e) {
					DfLogger.error(this, e.getMessage(), null, e);
				}
            }
            smanager.releaseSession(session);
        }

    }

    private void initTree() {
        root = new QuickClientMutableTreeNode("Templates");
        treemodel = new DefaultTreeModel(root);
        templates = new QuickClientMutableTreeNode("Templates");
        root.add(templates);


        IDfCollection col = null;
        IDfCollection col2 = null;
        IDfSession session = null;
        try {
            Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
            setCursor(cur);
            session = smanager.getSession();
            templates.setDokuData(new DokuData(session.getObjectByQualification("dm_cabinet where object_name = 'Templates'").getString("r_object_id")));

            IDfQuery query2 = new DfQuery();
            query2.setDQL("select r_object_id, object_name, r_link_cnt from dm_folder where folder('/Templates')");

            col2 = query2.execute(session, DfQuery.DF_READ_QUERY);


            while (col2.next()) {
                String kakka = col2.getString("object_name");
                int rLinkCnt = col2.getInt("r_link_cnt");
                QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(kakka);
                DokuData data = new DokuData(col2.getString("r_object_id"));
                newNode.setDokuData(data);
                treemodel.insertNodeInto(newNode, templates, 0);
                if (rLinkCnt > 0) {
                    QuickClientMutableTreeNode tempNode = new QuickClientMutableTreeNode(kakka);
                    treemodel.insertNodeInto(tempNode, newNode, 0);
                }

            }
            folderTree.setModel(treemodel);
            folderTree.validate();
            folderTree.setVisible(true);


        } catch (DfException ex) {
            log.error(ex);
        } finally {
            try {
                if (col2 != null) {
                    col2.close();
                }
            } catch (DfException ex) {
                log.error(ex);
            }
            
                smanager.releaseSession(session);
            
            Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
            setCursor(cur2);
        }
        folderTree.addTreeSelectionListener(this);
    }

    public void initializeColumns() {
        templateTable.setAutoCreateColumnsFromModel(true);
        tablemodel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tablemodel.setColumnCount(0);
        // default column values
        tablemodel.addColumn(".");
        tablemodel.addColumn("Name");
        tablemodel.addColumn("data");
        templateTable.setModel(tablemodel);
        templateTable.getColumnModel().getColumn(0).setCellRenderer(formatrenderer);
        templateTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        templateTable.setEditingRow(1);
        templateTable.setRowHeight(22);

        for (int i = 0; i < 1; i++) {
            TableColumn col = templateTable.getColumnModel().getColumn(i);
            if (i == 0 || i == 1) {
                col.setPreferredWidth(22);
                col.setMaxWidth(22);
            } else {
                col.setPreferredWidth(400);
            }
        }
        int lastIndex = templateTable.getColumnCount();
        templateTable.getColumnModel().removeColumn(templateTable.getColumnModel().getColumn(lastIndex - 1));
    }

    public String getSelectedType() {
        return selectedType;
    }

    public String getSelectedFormat() {
        return selectedFormat;
    }

    public boolean isShowAll() {
        return showAll;
    }

    public void setShowAll(boolean showAll) {
        this.showAll = showAll;
    }

    public JTree getJTree() {
        return this.folderTree;
    }

    public void valueChanged(TreeSelectionEvent e) {

        tablemodel.setRowCount(0);
        Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
        setCursor(cur);
        IDfSession session = null;
        IDfCollection col = null;

        TreePath path = folderTree.getSelectionPath();
        if (path == null) {
            return;
        }
        QuickClientMutableTreeNode selectedNode = (QuickClientMutableTreeNode) path.getLastPathComponent();

        session = smanager.getSession();
        IDfQuery query = new DfQuery();
        //query.setDQL("W");
        String objID = selectedNode.getDokuDataID();
        if (objID == null) {
            return;
        }
        if (this.isShowAll()) {
            query.setDQL("select object_name, r_object_id, a_content_type, r_object_type from dm_document where" +
                    " any i_folder_id = '" + objID + "' order by r_object_id");
        } else {
            query.setDQL("select object_name, r_object_id, a_content_type, r_object_type from " + this.getSelectedType() + " where " +
                    "a_content_type = '" + this.getSelectedFormat() + "' and any i_folder_id = '" + objID + "' order by r_object_id");
        }
        try {
            col = query.execute(session, DfQuery.DF_READ_QUERY);
            while (col.next()) {
                Vector<Object> vector = new Vector<Object>();
                vector.add(col.getString("a_content_type") + "," + col.getString("r_object_type"));
                vector.add(col.getString("object_name"));
                //System.out.println(col.getString("object_name"));
                DokuData data = new DokuData(col.getString("r_object_id"));
                vector.add(data);
                tablemodel.addRow(vector);
            }
            templateTable.setModel(tablemodel);
            templateTable.validate();
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                }
            }
            smanager.releaseSession(session);
            Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
            setCursor(cur2);
        }
    }
}

