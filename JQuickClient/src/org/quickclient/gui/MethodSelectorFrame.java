/*
 * MethodSelectorFrame.java
 *
 * Created on 25. kesäkuuta 2007, 22:45
 */
package org.quickclient.gui;


import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.MethodSelectorData;

/**
 *
 * @author  Administrator
 */
public class MethodSelectorFrame extends javax.swing.JFrame {
	private static final long serialVersionUID = 1L;
    DocuSessionManager smanager;
    Logger log = Logger.getLogger(MethodSelectorFrame.class);
    /** Creates new form MethodSelectorFrame */
    public MethodSelectorFrame() {
        initComponents();
    }

    public MethodSelectorFrame(ActionListener listener, MethodSelectorData data) {

        initComponents();
        smanager = DocuSessionManager.getInstance();
        cmdSelect.addActionListener(listener);
        setMethodselectordata(data);
        DefaultTableModel model = new DefaultTableModel() {
        	private static final long serialVersionUID = 1L;
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        methodmodel = model;
        methodmodel.addColumn("Methods");

        tblMethodList.setModel(methodmodel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtMethodFilter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmdQuery = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMethodList = new javax.swing.JTable();
        cmdSelect = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Method Filter"));

        txtMethodFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMethodFilterActionPerformed(evt);
            }
        });

        jLabel1.setText("Method Name:");

        cmdQuery.setMnemonic('q');
        cmdQuery.setText("Query");
        cmdQuery.setMargin(new java.awt.Insets(1, 4, 1, 4));
        cmdQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdQueryActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtMethodFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txtMethodFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdQuery))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblMethodList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Methods"
            }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblMethodList.setShowHorizontalLines(false);
        tblMethodList.setShowVerticalLines(false);
        tblMethodList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMethodListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMethodList);

        cmdSelect.setText("Select");
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });

        cmdCancel.setText("Cancel");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .add(cmdSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdCancel)
                    .add(cmdSelect))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed
        int row = tblMethodList.getSelectedRow();
        Vector v = (Vector) methodmodel.getDataVector().elementAt(row);
        ////System.out.println(v);
        String Stringi = (String) v.elementAt(0);
        getMethodselectordata().setMethodname(Stringi);
        this.dispose();
    }//GEN-LAST:event_cmdSelectActionPerformed

    private void tblMethodListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMethodListMouseClicked
        int row = tblMethodList.getSelectedRow();
        Vector v = (Vector) methodmodel.getDataVector().elementAt(row);
        ////System.out.println(v);
        String Stringi = (String) v.elementAt(0);
        getMethodselectordata().setMethodname(Stringi);
    }//GEN-LAST:event_tblMethodListMouseClicked

    private void cmdQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdQueryActionPerformed
        String queryFilter = txtMethodFilter.getText();
        IDfCollection col = null;
        IDfQuery query = new DfQuery();
        if (queryFilter.length() > 0) {
            query.setDQL("select object_name from dm_method where object_name like '" + queryFilter + "%' order by object_name");
        } else {
            query.setDQL("select object_name from dm_method order by object_name");
        }

        IDfSession session = null;
        try {
            session = smanager.getSession();
            col = query.execute(session, IDfQuery.DF_READ_QUERY);
            while (col.next()) {
                Vector<String> kakkavektor = new Vector<String>();
                String methodname = col.getString("object_name");
                kakkavektor.add(methodname);
                methodmodel.addRow(kakkavektor);
            }
        } catch (DfException ex) {
            log.error(ex);
        } finally {
            try {
                col.close();
            } catch (DfException ex) {
            }
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
        tblMethodList.validate();
    }//GEN-LAST:event_cmdQueryActionPerformed

    private void txtMethodFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMethodFilterActionPerformed
//  add your handling code here:
        cmdQueryActionPerformed(evt);
    }//GEN-LAST:event_txtMethodFilterActionPerformed
    private MethodSelectorData methodselectordata;
    private DefaultTableModel methodmodel;

    public MethodSelectorData getMethodselectordata() {
        return methodselectordata;
    }

    public void setMethodselectordata(MethodSelectorData methodselectordata) {
        this.methodselectordata = methodselectordata;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdQuery;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMethodList;
    private javax.swing.JTextField txtMethodFilter;
    // End of variables declaration//GEN-END:variables
}
