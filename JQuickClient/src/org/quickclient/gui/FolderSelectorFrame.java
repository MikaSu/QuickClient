/*
 * FolderSelectorFrame.java
 *
 * Created on 4. marraskuuta 2006, 23:36
 */
package org.quickclient.gui;

import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.quickclient.classes.DocuSessionManager;
import org.quickclient.classes.DokuData;
import org.quickclient.classes.ExJTextField;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfLogger;


/**
 *
 * @author  Administrator
 */
public class FolderSelectorFrame extends javax.swing.JFrame {

    DocuSessionManager smanager;
//    Logger log = Logger.getLogger(FolderSelectorFrame.class);
    /** Creates new form FolderSelectorFrame */
    public FolderSelectorFrame(ActionListener a, FolderSelectorData data) {
    	setAlwaysOnTop(true);
        smanager = DocuSessionManager.getInstance();
        setFolderselectordata(data);
        initComponents();
        cmdSelect.addActionListener(a);

        java.net.URL imageURL = null;
        java.net.URL imageURL2 = null;
        java.net.URL imageURL3 = null;
        Icon leafIcon = null;
        Icon openIcon = null;
        Icon closedIcon = null;
        imageURL = FormatRenderer.class.getResource("fclosed256.gif");
        imageURL2 = FormatRenderer.class.getResource("fopen256.gif");
        imageURL3 = FormatRenderer.class.getResource("fclosed256.gif");
        if (imageURL != null) {
            leafIcon = new ImageIcon(imageURL);
        }
        if (imageURL2 != null) {
            openIcon = new ImageIcon(imageURL2);
        }
        if (imageURL3 != null) {
            closedIcon = new ImageIcon(imageURL3);
        }

        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setOpenIcon(openIcon);
            renderer.setClosedIcon(closedIcon);
            folderTree.setCellRenderer(renderer);
        }
        root = new QuickClientMutableTreeNode("Cabinets");
        treemodel = new DefaultTreeModel(root);
        initAll();
    }

    public void initAll() {
        initTreeView();
    }

    private void initTreeView() {
        IDfSession session = null;
        IDfCollection col = null;

        try {
            session = smanager.getSession();
            IDfQuery query = new DfQuery();
            query.setDQL("select r_object_id, object_name, r_link_cnt from dm_cabinet order by object_name desc");

            col = query.execute(session, IDfQuery.DF_READ_QUERY);

            while (col.next()) {
                String objName = col.getString("object_name");
                int rLinkCnt = col.getInt("r_link_cnt");
                QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(objName);
                DokuData data = new DokuData(col.getString("r_object_id"));
                newNode.setDokuData(data);
                treemodel.insertNodeInto(newNode, root, 0);
                if (rLinkCnt > 0) {
                    QuickClientMutableTreeNode tempNode = new QuickClientMutableTreeNode(objName);
                    treemodel.insertNodeInto(tempNode, newNode, 0);

                }
            }
            folderTree.setModel(treemodel);
            folderTree.validate();
            folderTree.setRootVisible(true);
            folderTree.setVisible(true);

        } catch (DfException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
            DfLogger.error(this, ex.getMessage(), null, ex);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
                   DfLogger.error(this, ex.getMessage(), null, ex);
                }
            }
            if (session != null) {
                smanager.releaseSession(session);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPath = new ExJTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        folderTree = new javax.swing.JTree();
        cmdcancel = new javax.swing.JButton();
        cmdSelect = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        folderTree.setRootVisible(false);
        folderTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                folderTreeTreeExpanded(evt);
            }
        });
        folderTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                folderTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(folderTree);

        cmdcancel.setMnemonic('c');
        cmdcancel.setText("Cancel"); //$NON-NLS-1$
        cmdcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cmdSelect.setMnemonic('s');
        cmdSelect.setText("Select"); //$NON-NLS-1$
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });

        cmdNew.setText("Create New.."); //$NON-NLS-1$
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(cmdNew)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 154, Short.MAX_VALUE)
                        .add(cmdSelect)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdcancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdcancel)
                    .add(cmdSelect)
                    .add(cmdNew))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed
// TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cmdSelectActionPerformed

    private void folderTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_folderTreeMouseClicked
// TODO add your handling code here:

        TreePath path = folderTree.getSelectionPath();
        //txtPath.setText(path.toString());
        if (path!=null) {
        int count = path.getPathCount();
        StringBuffer sb = new StringBuffer();
        sb.append("/");
        for (int i = 0; i < count; i++) {
            if (i > 0) { // do not add root node..
                sb.append(path.getPathComponent(i).toString());
                if (i < count - 1) {
                    sb.append("/");
                }
            }
        }
        ////System.out.println(folderselectordata);
        folderselectordata.setFolderPath(sb.toString());
        txtPath.setText(sb.toString());
        }
    }//GEN-LAST:event_folderTreeMouseClicked

    private void folderTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_folderTreeTreeExpanded

        Cursor cur = new Cursor(Cursor.WAIT_CURSOR);
        setCursor(cur);
        TreePath path = evt.getPath();
        QuickClientMutableTreeNode currNode = (QuickClientMutableTreeNode) path.getLastPathComponent();
        Vector<Object> myVector = new Vector<Object>();
        int ccount = currNode.getChildCount();
        for (int i = 0; i < ccount; i++) {
            myVector.add((QuickClientMutableTreeNode) currNode.getChildAt(i));
        }
        // QuickClientMutableTreeNode currNode2 = (QuickClientMutableTreeNode) currNode.getLastLeaf();
        String objID = currNode.getDokuDataID();
        IDfSession session = null;
        IDfCollection col = null;

        try {
            session = smanager.getSession();
            IDfQuery query = new DfQuery();
            query.setDQL("select r_object_id, object_name,r_link_cnt from dm_folder where any i_folder_id = '" + objID + "' order by object_name");
            col = query.execute(session, IDfQuery.DF_READ_QUERY);
            while (col.next()) {
                String newID = col.getString("r_object_id");
                String objName = col.getString("object_name");
                int rLinkCnt = col.getInt("r_link_cnt");
                QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(objName);
                DokuData data = new DokuData(newID);
                newNode.setDokuData(data);
                treemodel.insertNodeInto(newNode, currNode, 0);
                if (rLinkCnt > 0) {
                    QuickClientMutableTreeNode tempNode = new QuickClientMutableTreeNode(objName + "W");
                    treemodel.insertNodeInto(tempNode, newNode, 0);
                }
            }
        } catch (DfException ex) {
            DfLogger.error(this, ex.getMessage(), null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (col != null) {
                try {
                    col.close();
                } catch (DfException ex) {
                	
                }
            }
            if (session != null) {
                smanager.releaseSession(session);
            }
        }


        Iterator i = myVector.iterator();
        while (i.hasNext()) {
            QuickClientMutableTreeNode a = (QuickClientMutableTreeNode) i.next();
            treemodel.removeNodeFromParent(a);
        }
        //treemodel.removeNodeFromParent(currNode2);
        folderTree.validate();
        Cursor cur2 = new Cursor(Cursor.DEFAULT_CURSOR);
        setCursor(cur2);
    }//GEN-LAST:event_folderTreeTreeExpanded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed

        String selPath = txtPath.getText();
        String foldername = JOptionPane.showInputDialog("Name");
        IDfSession session = null;
        try {
            session = smanager.getSession();
            if (selPath.length() == 0) {
                IDfSysObject obj = (IDfSysObject) session.newObject("dm_cabinet");
                obj.setObjectName(foldername);
                obj.save();
                QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(foldername);
                DokuData data = new DokuData(obj.getString("r_object_id"));
                newNode.setDokuData(data);
                treemodel.insertNodeInto(newNode, root, 0);
            } else {
                IDfSysObject obj = (IDfSysObject) session.newObject("dm_folder");
                obj.setObjectName(foldername);
                obj.link(selPath);
                QuickClientMutableTreeNode newNode = new QuickClientMutableTreeNode(foldername);
                DokuData data = new DokuData(obj.getString("r_object_id"));
                newNode.setDokuData(data);
                TreePath path = folderTree.getSelectionPath();
                if (path == null) {
                    return;
                }
                QuickClientMutableTreeNode selectedNode = (QuickClientMutableTreeNode) path.getLastPathComponent();
                treemodel.insertNodeInto(newNode, selectedNode, 0);
                obj.save();
            }
        } catch (DfException ex) {
        	DfLogger.error(this, ex.getMessage(), null, ex);
        	JOptionPane.showMessageDialog(null, ex.getMessage(), "Error occured!", JOptionPane.ERROR_MESSAGE);
        	
        } finally {
            if (session != null) {
                smanager.releaseSession(session);
            }
        }

    }//GEN-LAST:event_cmdNewActionPerformed
    private QuickClientMutableTreeNode root;
    private FolderSelectorData folderselectordata;
    private DefaultTreeModel treemodel;

    public void setFolderselectordata(FolderSelectorData folderselectordatax) {
        this.folderselectordata = folderselectordatax;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JTree folderTree;
    private javax.swing.JButton cmdcancel;
    private javax.swing.JScrollPane jScrollPane1;
    private ExJTextField txtPath;
    // End of variables declaration//GEN-END:variables
}
